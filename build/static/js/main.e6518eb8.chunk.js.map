{"version":3,"sources":["state.js","Utils/getRandomId.js","Utils/getFormattedViewTime.js","Admin/Admin.jsx","Statements/Statements.jsx","Presort/NegativeButton.jsx","Presort/PositiveButton.jsx","Presort/UncertainButton.jsx","Presort/StatementList.jsx","Utils/getCumulativeDuration.js","Utils/getCurrentDateTime.js","Utils/calculateTimeOnPage.js","Utils/millisecondsToTime.js","Presort/Presort.jsx","Sort/checkForColumnOverload.js","Sort/move.js","Sort/reorder.js","Sort/getItemStyle.js","Sort/getListStyle.js","Sort/SortColumn.jsx","Sort/getListStyleHori.js","Sort/getItemStyleHori.js","Sort/SortCompletedMessage.jsx","Sort/ColumnOverloadMessage.jsx","Sort/NumberCardsSortedMessage.jsx","Sort/Sort.jsx","Postsort/getPostSortCardStyleHigh.js","Postsort/LowCards.jsx","Postsort/LowCards2.jsx","Postsort/HighCards.jsx","Postsort/PostSort.jsx","Survey/Survey.jsx","Postsort/HighCards2.jsx","Postsort/NeutralCards.jsx","SubmitData/calculateTotalProjectTime.js","SubmitData/prepareDataForPost.js","SubmitData/SubmitData.jsx","Results/Results.jsx","Landing/Landing.jsx","App.js","serviceWorker.js","index.js"],"names":["store","setState","update","updateKeys","Object","keys","i","length","this","getState","value","returnValue","cloneDeep","displayLanding","displayAdmin","displayStatements","displayDemonstration","displayData","displayDelete","displayPresort","displaySort","displayPostsort","displaySurvey","displaySubmitData","displayResults","showStartButton","result","statements","columnN1","draggingOverColumnId","sortResults","sortResultsText","currentSortValue","columnOverload","overloadedColumn","isSortingCards","sortCompleted","numSortedStatements","columnId","columnList","columnStatements","sortPageDurationCumulative","sortPageDurationFormatted","sortPageLastAccess","statementCommentsObj","postSortPageLastAccess","postSortPageDurationCumulative","postSortPageDurationFormatted","getRandomId","randomId","String","fromCharCode","Math","floor","random","getFormattedViewTime","date","Date","minutes","getMinutes","seconds","getSeconds","getDate","getMonth","getFullYear","getHours","handleButtonClick","e","console","log","target","id","buttonId","state","randomId8","randomId16","localStorage","setItem","startDate","startTime","now","handleEmailButtonClick","Admin","_this$props","props","projectName","sortCharacteristics","loadStatements","getItem","undefined","JSON","stringify","react_default","a","createElement","PageContainer","Column1","Column1Button","onClick","style","paddingLeft","Column2","Column2Button","Column3","htmlFor","type","name","defaultValue","BeginQsortButton","fontSize","margin","padding","ResultsSection","ResultsTitle","ResultsDiv","Component","view","fadeIn","keyframes","_templateObject","fadeOut","_templateObject2","styled","div","_templateObject3","out","_templateObject4","_templateObject5","_templateObject6","button","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","_templateObject12","handleClick","Statements","statementList","Statements_PageContainer","HeaderDiv","NavButStatements","map","item","key","statementNum","statement","Statements_templateObject","Statements_templateObject2","Statements_templateObject3","Statements_templateObject4","Statements_templateObject5","NegativeButton","border","NegativeButtonWithBorder","index","NegativeButtonNoBorder","NegativeButton_templateObject","NegativeButton_templateObject2","PositiveButton","PositiveButtonWithBorder","PositiveButtonNoBorder","PositiveButton_templateObject","PositiveButton_templateObject2","UncertainButton","UncertainButtonWithBorder","UncertainButtonNoBorder","UncertainButton_templateObject","UncertainButton_templateObject2","handleClickNewButton","forceUpdate","slice","idArray","split","colorType","cardColor","divColor","sortValue","greenChecked","pinkChecked","yellowChecked","toConsumableArray","StatementList","className","concat","display","marginRight","Presort_NegativeButton","Presort_UncertainButton","Presort_PositiveButton","getCumulativeDuration","cumulativeDuration2","cumulativeDuration","getCurrentDateTime","currentDate","month","year","hour","minute","calculateTimeOnPage","prefix","prefix2","identifier","identifier3","identifier4","durationCumulative","newDurationCumulative","dateString","formattedDuration","s","pad","n","z","arguments","millisecondsToTime","handleClick2","PreSort","_this","titleText","Presort_PageContainer","TitleDiv","Presort_NavButStatements","Presort_StatementList","Presort_templateObject","Presort_templateObject2","Presort_templateObject3","Presort_templateObject4","Presort_templateObject5","checkForColumnOverload","columnLengthCheckArray","forcedSorts","totalStatements","qSortPattern","qSortHeaderNumbers","tempArray","forEach","push","setSortCompleted","setOverloadedColumn","setColumnOverload","setIsSortingCards","reduce","acc","val","move","sourceListArray","destinationListArray","droppableSource","droppableDestination","qSortHeaders","destClone","_sourceListArray$spli","splice","removed","slicedToArray","droppableId","currentColumnLength","vCols","qSortPatternClone","overloadArrayCheck","match","isEqual","reorder","columnToBeReordered","startIndex","endIndex","list","_result$splice","getItemStyle","isDragging","draggableStyle","cardWidth","cardHeight","objectSpread","userSelect","lineHeight","height","width","borderRadius","alignItems","textAlign","background","getListStyle","isDraggingOver","columnWidth","columnColor","isUnderMaxCards","columnStatementsArray","maxCards","minWidth","marginTop","minHeight","marginBottom","SortColumn","qSortHeaderNumber","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","SortColumn_HeaderDiv","data-react-beautiful-dnd-drag-handle","draggableId","assign","draggableProps","dragHandleProps","placeholder","React","SortColumn_templateObject","getListStyleHori","horiCardMinHeight","paddingRight","overflowX","flexDirection","getItemStyleHori","newSortValue","newCardColor","isNaN","WebkitUserSelect","maxWidth","marginLeft","order","sortCompleteText","CardsSortedDiv","NumberCardsSortedMessage_templateObject","Sort","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onDragEnd","parse","source","destination","setColumnStatements","_this2","_this$props2","nextButtonText","columnColorsArray","changeColumnHeaderColor","columns","highlightedColHeader","Sort_SortColumn","SortFooterDiv","direction","FooterMessageBox","SortCompletedMessage","Sort_ColumnOverloadMessage","Sort_NumberCardsSortedMessage","Sort_templateObject","Sort_templateObject2","getPostSortCardStyleHigh","maxHeight","styles","container","cardAndTextHolder","alignContent","textHolder","flexGrow","cardTag","color","LowCards","onBlur","event","columnDisplay","itemId","cards","targetCard","userEnteredText","el","comment","replace","disagreeObj","lowCards","disagreeText","data-gramm_editor","lowCards2","HighCards","agreeObj","highCards","agreeText","Container","HighCards_templateObject","highCards2","NeutralCards","neutralObj","neutralCards","neutralText","justifyContent","paddingBottom","PostSort","instructionsText","columnDisplay2","Postsort_HighCards","displaySecondColumn","HighCards2","displayNeutralObjects","Postsort_NeutralCards","LowCards2","Postsort_LowCards","calculateTotalProjectTime","preSortTime","sortTime","postSortTime","surveyTime","hours","preSortTimeArray","Number","sortTimeArray","postSortTimeArray","surveyTimeArray","additionalMinutes","remainingSeconds","additionalHours","remainingMinutes","prepareDataForPost","commentArrays","surveyResults2","surveyResults","data","endDate","resultsJson","participantName","preSortPageLastAccess","surveyPageLastAccess","totalProjectTime","preSortPageDuration","sortPageDuration","postSortPageDuration","surveyPageDuration","lookUpTable","columnN6","columnN5","columnN4","columnN3","columnN2","column0","column1","column2","column3","column4","column5","column6","column7","column8","column9","column10","column11","column12","column13","sortValueAssignedArray","commentKeys","columnStatementsVcolsKeys","j","includes","apply","sort","b","sortString","k","m","allResults","SurveyForm","sendDataToSurver","toSubmitData","bind","assertThisInitialized","json","pages","Fragment","survey_react","onComplete","SubmitData","showSuccess","showError","showTransmit","transmitData","firebase","window","participantId","database","set","error","Results","results2","results","Results_PageContainer","Results_HeaderDiv","Results_NavButStatements","Results_ResultsSection","Results_ResultsTitle","Results_ResultsDiv","Results_templateObject","Results_templateObject2","Results_templateObject3","Results_templateObject4","Results_templateObject5","Results_templateObject6","Results_templateObject7","Results_templateObject8","handleStartButtonClick","handleAddParticipantName","Landing","Landing_PageContainer","onChange","Landing_BeginQsortButton","PlaceholderButton","Landing_templateObject","Landing_templateObject2","Landing_templateObject3","Landing_templateObject4","Landing_templateObject5","Landing_templateObject6","Landing_templateObject7","Landing_templateObject8","Landing_templateObject9","Landing_templateObject10","Landing_templateObject11","Landing_templateObject12","_templateObject13","App","adminData","preSortData","sortPageData","postSortData","surveyData","landingData","App_PageContainer","src_Landing_Landing","src_Admin_Admin","src_Statements_Statements","src_Results_Results","Presort","src_Sort_Sort","src_Postsort_PostSort","Survey","src_SubmitData_SubmitData","App_templateObject","Boolean","location","hostname","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","ReactDOM","render","src_App_0","document","getElementById","open","process","send","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6518eb8.chunk.js","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { store } from 'react-easy-state';\n\nexport default store({\n  setState(update) {\n    const updateKeys = Object.keys(update);\n    for (let i = 0; i < updateKeys.length; i += 1) {\n      this[updateKeys[i]] = update[updateKeys[i]];\n    }\n  },\n\n  getState(value) {\n    const returnValue = this[value];\n    const newReturnValue = cloneDeep(returnValue);\n    return newReturnValue;\n  },\n  /* App */\n  displayLanding: true,\n  displayAdmin: false,\n  displayStatements: false,\n  displayDemonstration: false,\n  displayData: false,\n  displayDelete: false,\n  displayPresort: false,\n  displaySort: false,\n  displayPostsort: false,\n  displaySurvey: false,\n  displaySubmitData: false,\n  displayResults: false,\n\n  /* Landing */\n  showStartButton: false,\n\n  /* Sort */\n  result: [],\n  statements: [],\n  columnN1: [],\n  draggingOverColumnId: 'column99',\n  sortResults: [], // array of objects\n  sortResultsText: '',\n  currentSortValue: '',\n  columnOverload: false,\n  overloadedColumn: '',\n  isSortingCards: true,\n  sortCompleted: false,\n  numSortedStatements: 0,\n  columnId: '',\n  columnList: '',\n  columnStatements: {},\n  sortPageDurationCumulative: '',\n  sortPageDurationFormatted: '',\n  sortPageLastAccess: '',\n\n  /* Post-Sort */\n  statementCommentsObj: {},\n  postSortPageLastAccess: '',\n  postSortPageDurationCumulative: '',\n  postSortPageDurationFormatted: '',\n});\n","const getRandomLetter = () => {\n  const randLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  return randLetter;\n};\n\nconst getRandomId = () => {\n  // let randomId = localStorage.getItem('randomId8');\n\n  // if coming back to the page, keep the previous id\n  // if (randomId !== 'initialize') {\n  // return randomId;\n  // }\n\n  let randomId = '';\n  for (let i = 0; i < 8; i++) {\n    randomId += getRandomLetter();\n  }\n  return randomId;\n};\n\nexport default getRandomId;\n","const getFormattedViewTime = () => {\n  let date = new Date();\n  let minutes = +date.getMinutes();\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  let seconds = +date.getSeconds();\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  let dateTime =\n    date.getDate() +\n    \"/\" +\n    (date.getMonth() + 1) +\n    \"/\" +\n    date.getFullYear() +\n    \" @ \" +\n    date.getHours() +\n    \":\" +\n    minutes +\n    \":\" +\n    seconds;\n  return dateTime;\n};\n\nexport default getFormattedViewTime;\n","// import shuffle from 'lodash/shuffle';\nimport { view } from \"react-easy-state\";\nimport React, { Component } from \"react\";\n// import cloneDeep from 'lodash/cloneDeep';\nimport styled, { keyframes } from \"styled-components\";\nimport state from \"../state\";\nimport getRandomId from \"../Utils/getRandomId\";\nimport getFormattedViewTime from \"../Utils/getFormattedViewTime\";\n\n/* eslint react/prop-types: 0 */\n\nconst handleButtonClick = e => {\n  console.log(e.target.id);\n  const buttonId = e.target.id;\n  if (buttonId === \"StatementsButton\") {\n    state.setState({ displayAdmin: false, displayStatements: true });\n  }\n  if (buttonId === \"goButton\") {\n    state.setState({ displayAdmin: false, displayPresort: true });\n\n    // shuffle the cards - once only\n    // TODO - add card shuffle\n    // const hasShuffledCards = localStorage.getItem('hasShuffled');\n    // if (hasShuffledCards !== 'true') {\n    //   const cards2 = this.props.columnStatements.statementList;\n    //   const cards = cloneDeep(cards2);\n    //   const shuffledCards = shuffle(cards);\n    //   this.props.columnStatements.statementList = shuffledCards;\n    //   localStorage.setItem(\n    //     'columnStatements',\n    //     JSON.stringify(this.props.columnStatements)\n    //   );\n    //   localStorage.setItem('hasShuffled', 'true');\n    // }\n\n    // sent participant info to state for storage\n    const randomId8 = getRandomId();\n    const randomId8b = getRandomId();\n    const randomId16 = randomId8 + randomId8b;\n\n    localStorage.setItem(\"randomId8\", randomId8);\n    localStorage.setItem(\"randomId16\", randomId16);\n\n    const startDate = getFormattedViewTime();\n    localStorage.setItem(\"startDate\", startDate);\n\n    const startTime = Date.now();\n    localStorage.setItem(\"projectStartTime\", startTime);\n  }\n};\n\nconst handleEmailButtonClick = () => {\n  console.log(\"email click\");\n  // pullEmailHeader();\n  // var link = document.getElementById('email');\n  state.setState({ displayAdmin: false, displayResults: true });\n\n  // const emailAddress = 'banasick@gmail.com'; // localStorage.getItem('emailInput');\n  // const mail = document.createElement('a');\n  // mail.target = '_blank';\n  // mail.href =\n  //   'mailto:' + emailAddress + '?' + 'subject=Ken-Q Mobile Data&body=';\n\n  // // const allResults = localStorage.getItem('allResults');\n  // mail.href += 'test'; // allResults;\n  // mail.click();\n\n  // state.setState({ displayAdmin: true });\n\n  // };\n\n  // function getBody() {\n  //     var emailText1 = $(\"#emailHeader\").html();\n  //     var emailText2 = $(\"#incomingResults\").html() + \"<br><br>\";\n  //     var emailText3 = $(\"#incomingComments\").html();\n  //     var emailTextResults = emailText1 + emailText2;\n  //     return [emailTextResults, emailText3];\n  // }\n};\n\nclass Admin extends Component {\n  render() {\n    const { projectName, columnStatements, sortCharacteristics } = this.props;\n\n    const loadStatements = localStorage.getItem(\"loadStatements\");\n    if (loadStatements !== \"true\" || loadStatements === undefined) {\n      localStorage.setItem(\n        \"columnStatements\",\n        JSON.stringify(columnStatements)\n      );\n      localStorage.setItem(\"loadStatements\", \"true\");\n    }\n\n    state.setState({ sortCharacteristics });\n\n    return (\n      <PageContainer>\n        <Column1>\n          <Column1Button id=\"emailButton\" onClick={handleEmailButtonClick}>\n            View Results\n          </Column1Button>\n          <Column1Button\n            id=\"informationButton\"\n            style={{ paddingLeft: 10 }}\n            onClick={handleButtonClick}\n          >\n            View Information\n          </Column1Button>\n        </Column1>\n        <Column2>\n          <Column2Button id=\"deleteButton\" onClick={handleButtonClick}>\n            Delete Data\n          </Column2Button>\n          <Column2Button\n            id=\"StatementsButton\"\n            style={{ paddingLeft: 10 }}\n            onClick={handleButtonClick}\n          >\n            Add Statements\n          </Column2Button>\n        </Column2>\n        <Column3>\n          <label htmlFor=\"projectNameInput\">\n            Project Name:\n            <input\n              id=\"projectNameInput\"\n              type=\"text\"\n              name=\"projectName\"\n              defaultValue={projectName}\n            />\n          </label>\n          <label htmlFor=\"emailAddressInput\">\n            Participant Name: (optional)\n            <input\n              id=\"participantNameInput\"\n              type=\"text\"\n              name=\"participant\"\n              defaultValue=\"participant name\"\n            />\n          </label>\n        </Column3>\n        <BeginQsortButton id=\"goButton\" onClick={handleButtonClick}>\n          <span style={{ fontSize: 20 }}>Start</span> <br />\n          <span style={{ fontSize: 110, margin: 0, padding: 0 }}>Q</span> <br />\n          <span style={{ fontSize: 20 }}>Sort</span>\n        </BeginQsortButton>\n        <ResultsSection>\n          <ResultsTitle>Results</ResultsTitle>\n          <ResultsDiv />\n        </ResultsSection>\n      </PageContainer>\n    );\n  }\n}\n\nexport default view(Admin);\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst PageContainer = styled.div`\n  display: grid;\n  justify-items: center;\n  grid-template-columns: 341px 342px 342px 341px;\n  grid-template-rows: 350px auto;\n  width: 1024px;\n  height: 768px;\n  background-color: #323232;\n  color: white;\n  padding-top: 20px;\n  visibility: ${props => (props.out ? \"hidden\" : \"visible\")};\n  animation: ${props => (props.out ? fadeOut : fadeIn)} 0.2s linear;\n  transition: visibility 1s linear;\n`;\n\nconst Column1 = styled.div`\n  grid-column-start: 1;\n  grid-row-start: 1;\n  /* border: 2px solid yellow; */\n`;\n\nconst Column2 = styled.div`\n  grid-column-start: 2;\n  grid-row-start: 1;\n  /* border: 2px solid yellow; */\n`;\n\nconst Column3 = styled.div`\n  width: 250px;\n  grid-column-start: 3;\n  grid-row-start: 1;\n  /* border: 2px solid yellow; */\n\n  input {\n    width: 250px;\n    font-size: 20px;\n    margin-bottom: 30px;\n  }\n`;\n\nconst Column1Button = styled.button`\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  appearance: none;\n  height: 140px;\n  width: 250px;\n  margin-left: 45px;\n  margin-bottom: 15px;\n  margin-top: 10px;\n  color: #323232;\n  background: #1985c5;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  border: 0px solid #666;\n  font-size: 300%;\n  line-height: 1em;\n  outline: none;\n  -webkit-user-select: none;\n\n  &:active {\n    background-color: #146a9d;\n  }\n`;\n\nconst Column2Button = styled.button`\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  appearance: none;\n  width: 250px;\n  height: 140px;\n  margin-top: 10px;\n  margin-bottom: 15px;\n  margin-left: 46px;\n  color: #323232;\n  background: #1985c5;\n  border: 0px solid #666;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  font-size: 300%;\n  text-align: center;\n  line-height: 1.05em;\n  outline: none;\n  -webkit-user-select: none;\n\n  &:active {\n    background-color: #146a9d;\n  }\n`;\n\nconst BeginQsortButton = styled.button`\n  appearance: none;\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  margin-left: 5px;\n  width: 250px;\n  margin-top: 2px;\n  height: 250px;\n  background: #55b262;\n  color: #323232;\n  font-weight: 900;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  grid-column-start: 4;\n  grid-row-start: 1;\n  font-size: 50px;\n  text-align: center;\n  user-select: none;\n  border: 0px solid black;\n  outline: none;\n\n  &:active {\n    background-color: #448e4e;\n  }\n`;\n\nconst ResultsSection = styled.div`\n  margin-top: 50px;\n  grid-column-start: 1;\n  grid-column-end: 5;\n  grid-row-start: 2;\n  /* border: 2px solid red; */\n`;\n\nconst ResultsTitle = styled.div`\n  font-size: 30px;\n`;\n\nconst ResultsDiv = styled.div`\n  height: 480px;\n  width: 1270px;\n  background: whitesmoke;\n`;\n\n/*\n// shuffle the cards - once only\n    let hasShuffledCards = sessionStorage.getItem(\"hasShuffled\");\n    if (hasShuffledCards !== \"true\") {\n      const cards2 = this.props.columnStatements.statementList;\n      const cards = cloneDeep(cards2);\n      const shuffledCards = shuffle(cards);\n      this.props.columnStatements.statementList = shuffledCards;\n      sessionStorage.setItem(\n        \"columnStatements\",\n        JSON.stringify(this.props.columnStatements)\n      );\n      sessionStorage.setItem(\"hasShuffled\", \"true\");\n    }\n\n\n // sent participant info to state for storage\n    const randomId8 = getRandomId();\n    const randomId8b = getRandomId();\n    const randomId16 = randomId8 + randomId8b;\n\n    sessionStorage.setItem(\"randomId8\", randomId8);\n    sessionStorage.setItem(\"randomId16\", randomId16);\n\n    let startDate = getFormattedViewTime();\n    sessionStorage.setItem(\"startDate\", startDate);\n\n    startTime = Date.now();\n    sessionStorage.setItem(\"projectStartTime\", startTime);\n\n\n*/\n","import React, { Component } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { view } from 'react-easy-state';\nimport state from '../state';\n\n/* eslint react/prop-types: 0 */\n\nconst handleClick = () => {\n  console.log('clicked');\n  state.setState({ displayAdmin: true, displayStatements: false });\n};\n\nclass Statements extends Component {\n  render() {\n    const { columnStatements } = this.props;\n    const { statementList } = columnStatements;\n    console.log('TCL: Statements -> render -> statementList', columnStatements);\n\n    return (\n      <PageContainer>\n        <HeaderDiv>\n          <h1>Statements</h1>\n          <NavButStatements onClick={handleClick}>Return</NavButStatements>\n        </HeaderDiv>\n        <ol>\n          {statementList.map(item => (\n            <li key={item.statementNum}>{item.statement}</li>\n          ))}\n        </ol>\n      </PageContainer>\n    );\n  }\n}\n\nexport default view(Statements);\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst PageContainer = styled.div`\n  width: 1366px;\n  height: 1004px;\n  background-color: #323232;\n  color: whitesmoke;\n  padding: 20px;\n  visibility: ${props => (props.out ? 'hidden' : 'visible')};\n  animation: ${props => (props.out ? fadeOut : fadeIn)} 0.2s linear;\n  transition: visibility 1s linear;\n`;\n\nconst NavButStatements = styled.button`\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  appearance: none;\n  height: 40px;\n  width: 100px;\n  margin-left: 45px;\n  margin-top: 20px;\n  color: #323232;\n  background: #1985c5;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  border: 0px solid #666;\n  font-size: 150%;\n  text-align: center;\n  line-height: 1em;\n\n  &:active {\n    background-color: #146a9d;\n  }\n`;\n\nconst HeaderDiv = styled.div`\n  display: flex;\n  align-items: end;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst NegativeButton = props => {\n  if (props.border) {\n    return (\n      <NegativeButtonWithBorder\n        id={\"pink-\" + props.index}\n        onClick={props.onClick}\n      >\n        -\n      </NegativeButtonWithBorder>\n    );\n  } else {\n    return (\n      <NegativeButtonNoBorder\n        id={\"pink-\" + props.index}\n        onClick={props.onClick}\n      >\n        -\n      </NegativeButtonNoBorder>\n    );\n  }\n};\n\nexport default NegativeButton;\n\nconst NegativeButtonWithBorder = styled.button`\n  background-color: lightpink;\n  box-sizing: border-box;\n  font-size: 25px;\n  font-weight: bold;\n  width: 40px;\n  height: 35px;\n  border: 3px solid black;\n`;\n\nconst NegativeButtonNoBorder = styled.button`\n  background-color: lightpink;\n  font-size: 25px;\n  box-sizing: border-box;\n  font-weight: normal;\n  width: 40px;\n  height: 35px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst PositiveButton = props => {\n  if (props.border) {\n    return (\n      <PositiveButtonWithBorder\n        id={\"green-\" + props.index}\n        onClick={props.onClick}\n      >\n        +\n      </PositiveButtonWithBorder>\n    );\n  } else {\n    return (\n      <PositiveButtonNoBorder\n        id={\"green-\" + props.index}\n        onClick={props.onClick}\n      >\n        +\n      </PositiveButtonNoBorder>\n    );\n  }\n};\n\nexport default PositiveButton;\n\nconst PositiveButtonWithBorder = styled.button`\n  background-color: #c7f6c7;\n  box-sizing: border-box;\n  font-size: 25px;\n  font-weight: bold;\n  width: 40px;\n  height: 35px;\n  border: 3px solid black;\n`;\n\nconst PositiveButtonNoBorder = styled.button`\n  background-color: #c7f6c7;\n  font-size: 25px;\n  box-sizing: border-box;\n  font-weight: normal;\n  width: 40px;\n  height: 35px;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst UncertainButton = props => {\n  if (props.border) {\n    return (\n      <UncertainButtonWithBorder\n        id={\"yellow-\" + props.index}\n        onClick={props.onClick}\n      >\n        ?\n      </UncertainButtonWithBorder>\n    );\n  } else {\n    return (\n      <UncertainButtonNoBorder\n        id={\"yellow-\" + props.index}\n        onClick={props.onClick}\n      >\n        ?\n      </UncertainButtonNoBorder>\n    );\n  }\n};\n\nexport default UncertainButton;\n\nconst UncertainButtonWithBorder = styled.button`\n  background-color: rgba(211, 211, 211, 0.6);\n  box-sizing: border-box;\n  font-size: 25px;\n  font-weight: bold;\n  width: 40px;\n  height: 35px;\n  border: 3px solid black;\n`;\n\nconst UncertainButtonNoBorder = styled.button`\n  background-color: rgba(211, 211, 211, 0.6);\n  font-size: 25px;\n  box-sizing: border-box;\n  font-weight: normal;\n  width: 40px;\n  height: 35px;\n`;\n","import React from 'react';\nimport './StatementList.css';\n// import state from '../state';\n// import { useStore } from \"easy-peasy\";\nimport NegativeButton from './NegativeButton';\nimport PositiveButton from './PositiveButton';\nimport UncertainButton from './UncertainButton';\n// import { useStore } from \"easy-peasy\";\n\n/* eslint react/prop-types: 0 */\n\nconst handleClickNewButton = (e, forceUpdate, columnStatements) => {\n  // const columnStatements = store.getState().columnStatements;\n  const statements2 = columnStatements.statementList;\n  const statements = statements2.slice();\n  // let random = Math.floor(Math.random() * (9 - 0 + 1)) + 0;\n  const idArray = e.target.id.split('-');\n  const colorType = idArray[0];\n  const id = idArray[1];\n  if (colorType === 'green') {\n    statements[id].cardColor = 'greenSortCard';\n    statements[id].divColor = 'isPositiveStatement';\n    statements[id].sortValue = 111;\n    statements[id].greenChecked = true;\n    statements[id].pinkChecked = false;\n    statements[id].yellowChecked = false;\n  }\n  if (colorType === 'yellow') {\n    statements[id].cardColor = 'yellowSortCard';\n    statements[id].divColor = 'isUncertainStatement';\n    statements[id].pinkChecked = false;\n    statements[id].yellowChecked = true;\n    statements[id].greenChecked = false;\n    statements[id].sortValue = 222;\n  }\n  if (colorType === 'pink') {\n    statements[id].cardColor = 'pinkSortCard';\n    statements[id].divColor = 'isNegativeStatement';\n    statements[id].pinkChecked = true;\n    statements[id].yellowChecked = false;\n    statements[id].greenChecked = false;\n    statements[id].sortValue = 333;\n  }\n  columnStatements.statements = [...statements];\n  //   store.dispatch.setColumnStatements(columnStatements);\n  localStorage.setItem('columnStatements', JSON.stringify(columnStatements));\n  forceUpdate();\n};\n\nfunction StatementList(props) {\n  // const columnStatements = useStore(state => state.columnStatements);\n  // console.log(\n  //   \"TCL: StatementList -> columnStatements\",\n  //   JSON.stringify(columnStatements)\n  // );\n\n  const { columnStatements } = props;\n  const { statementList } = columnStatements; // useStore(state => state.columnStatements.statementList);\n  // const statementList = columnStatements.statementList;\n  return (\n    <div className=\"is-scrollable listDiv\">\n      {statementList.map((item, index) => (\n        <div\n          id={index}\n          key={item.statement}\n          className={`level levelDiv ${item.divColor}`}\n        >\n          <div\n            className=\"is-pulled-left\"\n            style={{ display: 'flex', marginRight: 25 }}\n          >\n            <NegativeButton\n              index={index}\n              border={item.pinkChecked}\n              key={`${item.statement}-pink`}\n              onClick={e => {\n                handleClickNewButton(\n                  e,\n                  props.forceUpdate,\n                  props.columnStatements\n                );\n              }}\n            />\n            <UncertainButton\n              index={index}\n              border={item.yellowChecked}\n              key={`${item.statement}-yellow`}\n              onClick={e => {\n                handleClickNewButton(\n                  e,\n                  props.forceUpdate,\n                  props.columnStatements\n                );\n              }}\n            />\n            <PositiveButton\n              index={index}\n              border={item.greenChecked}\n              key={`${item.statement}-green`}\n              onClick={e => {\n                handleClickNewButton(\n                  e,\n                  props.forceUpdate,\n                  props.columnStatements\n                );\n              }}\n            />\n          </div>\n          <div className=\"level-item levelItemCustom\">{item.statement}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default StatementList;\n","// import state from \"../store\";\n// import store from \"../state\";\n\nconst getCumulativeDuration = (startTime, cumulativeDuration2) => {\n  const cumulativeDuration = +cumulativeDuration2;\n  // duration, location\n  let dateNow = Date.now();\n\n  let fullTime = dateNow - startTime + cumulativeDuration;\n\n  return fullTime;\n};\n\nexport default getCumulativeDuration;\n","const getCurrentDateTime = () => {\n  const currentDate = new Date();\n  const date = currentDate.getDate();\n  const month = currentDate.getMonth(); //Be careful! January is 0 not 1\n  const year = currentDate.getFullYear();\n  const hour = currentDate.getHours();\n  let minute = currentDate.getMinutes();\n  let seconds = currentDate.getSeconds();\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  if (minute < 10) {\n    minute = \"0\" + minute;\n  }\n  let dateString =\n    date +\n    \"/\" +\n    (month + 1) +\n    \"/\" +\n    year +\n    \" @ \" +\n    hour +\n    \":\" +\n    minute +\n    \":\" +\n    seconds;\n\n  return dateString;\n};\n\nexport default getCurrentDateTime;\n","// import store from '../state';\nimport getCumulativeDuration from './getCumulativeDuration';\nimport millisecondsToTime from './millisecondsToTime';\nimport getCurrentDateTime from './getCurrentDateTime';\n\nconst calculateTimeOnPage = (startTime, prefix, prefix2) => {\n  const identifier = `${prefix}DurationCumulative`;\n  // const identifier2 = `set${prefix2}DurationCumulative`;\n  const identifier3 = `set${prefix2}DurationFormatted`;\n  const identifier4 = `set${prefix2}LastAccess`;\n\n  // const durationCumulative = store.getState()[identifier];\n  const durationCumulative = localStorage.getItem(identifier) || 0;\n\n  const newDurationCumulative = getCumulativeDuration(\n    startTime,\n    +durationCumulative\n  );\n  // send to state\n  localStorage.setItem(identifier, newDurationCumulative);\n\n  // send last access time to state\n  const dateString = getCurrentDateTime();\n  localStorage.setItem(identifier4, dateString);\n\n  // send to memory\n  const formattedDuration = millisecondsToTime(newDurationCumulative);\n  localStorage.setItem(identifier3, formattedDuration);\n};\n\nexport default calculateTimeOnPage;\n","export default function msToTime(s) {\n  // Pad to 2 or 3 digits, default is 2\n  var pad = (n, z = 2) => (\"00\" + n).slice(-z);\n  return (\n    pad((s / 3.6e6) | 0) +\n    \":\" +\n    pad(((s % 3.6e6) / 6e4) | 0) +\n    \":\" +\n    pad(((s % 6e4) / 1000) | 0) // +\n    // \".\" +\n    // pad(s % 1000, 3)\n  );\n}\n","import styled, { keyframes } from \"styled-components\";\nimport React, { Component } from \"react\";\nimport StatementList from \"./StatementList\";\nimport state from \"../state\";\nimport calculateTimeOnPage from \"../Utils/calculateTimeOnPage\";\n\n/* eslint react/prop-types: 0 */\n\nconst handleClick = () => {\n  console.log(\"clicked\");\n  state.setState({ displayLanding: true, displayPresort: false });\n};\n\nconst handleClick2 = () => {\n  console.log(\"clicked\");\n  state.setState({ displaySort: true, displayPresort: false });\n};\n\nlet startTime;\n\nclass PreSort extends Component {\n  componentDidMount() {\n    startTime = Date.now();\n  }\n\n  componentWillUnmount() {\n    calculateTimeOnPage(startTime, \"preSortPage\", \"PreSortPage\");\n  }\n\n  render() {\n    const forceUpdate = () => {\n      this.forceUpdate();\n    };\n    // nextButtonText\n    const { titleText, columnStatements } = this.props;\n\n    return (\n      <PageContainer>\n        <TitleDiv>\n          <div>{titleText}</div>\n          <div>\n            <NavButStatements onClick={handleClick2}>Next</NavButStatements>\n          </div>\n        </TitleDiv>\n        <StatementList\n          columnStatements={columnStatements}\n          forceUpdate={forceUpdate}\n        />\n      </PageContainer>\n    );\n  }\n}\n\nexport default PreSort;\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst PageContainer = styled.div`\n  width: 1024px;\n  height: 768px;\n  background-color: #323232;\n  color: whitesmoke;\n  visibility: ${props => (props.out ? \"hidden\" : \"visible\")};\n  animation: ${props => (props.out ? fadeOut : fadeIn)} 0.2s linear;\n  transition: visibility 1s linear;\n`;\n\nconst TitleDiv = styled.div`\n  display: flex;\n  align-items: center;\n  justify-items: center;\n  margin: 0;\n  width: 100%;\n  padding-left: 50px;\n  height: 120px;\n  background: steelblue;\n  text-align: center;\n  color: white;\n  font-size: 35px;\n`;\n\nconst NavButStatements = styled.button`\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  appearance: none;\n  height: 40px;\n  width: 100px;\n  font-size: 25px;\n  margin-left: 145px;\n  margin-top: 20px;\n  color: whitesmoke;\n  background: #323232;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  border: 0px solid #666;\n  text-align: center;\n  line-height: 1em;\n\n  &:active {\n    background-color: #146a9d;\n  }\n`;\n","import state from '../state';\n\nconst checkForColumnOverload = (\n  columnLengthCheckArray,\n  forcedSorts,\n  totalStatements\n) => {\n  const sortCharacteristics = state.getState('sortCharacteristics');\n\n  const qSortPattern = [...sortCharacteristics.qSortPattern];\n\n  const { qSortHeaderNumbers } = sortCharacteristics;\n\n  if (forcedSorts === true) {\n    const tempArray = [];\n    columnLengthCheckArray.forEach(function(item, index) {\n      if (item > qSortPattern[index]) {\n        tempArray.push(qSortHeaderNumbers[index]);\n        state.setState({ setSortCompleted: false });\n        state.setState({ setOverloadedColumn: qSortHeaderNumbers[index] });\n        state.setState({ setColumnOverload: true });\n        state.setState({ setIsSortingCards: false });\n\n        return null;\n      }\n    });\n    if (tempArray.length === 0) {\n      state.setState({ setColumnOverload: false });\n      state.setState({ setIsSortingCards: true });\n    }\n  }\n\n  const numSortedStatements = columnLengthCheckArray.reduce(function(acc, val) {\n    return acc + val;\n  });\n\n  state.setState({ numSortedStatements });\n\n  if (forcedSorts === false) {\n    if (numSortedStatements === totalStatements) {\n      state.setState({ setSortCompleted: true });\n      state.setState({ setIsSortingCards: false });\n    } else {\n      state.setState({ setSortCompleted: false });\n      state.setState({ setIsSortingCards: true });\n    }\n  }\n};\n\nexport default checkForColumnOverload;\n","import isEqual from 'lodash/isEqual';\nimport state from '../state';\nimport checkForColumnOverload from './checkForColumnOverload';\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (\n  sourceListArray,\n  destinationListArray,\n  droppableSource,\n  droppableDestination,\n  columnStatements,\n  totalStatements,\n  sortCharacteristics\n) => {\n  const { qSortPattern, qSortHeaders, forcedSorts } = sortCharacteristics;\n\n  const destClone = [...destinationListArray];\n\n  // to splice in and out\n  const [removed] = sourceListArray.splice(droppableSource.index, 1);\n  destinationListArray.splice(droppableDestination.index, 0, removed);\n\n  sourceListArray[droppableSource.droppableId] = [removed];\n  destinationListArray[droppableDestination.droppableId] = [...destClone];\n\n  // to assign to object and register results to state\n  const result = {};\n  result[droppableSource.droppableId] = [...sourceListArray];\n  result[droppableDestination.droppableId] = [...destinationListArray];\n\n  // to save to state and auto update lists\n  state.setState({ result });\n\n  // for sort complete checking\n  const columnLengthCheckArray = [];\n  for (let i = 0; i < qSortHeaders.length; i++) {\n    const currentColumnLength =\n      columnStatements.vCols[`column${qSortHeaders[i]}`];\n    columnLengthCheckArray.push(currentColumnLength.length);\n  }\n  // sort mutates, so clone\n  const qSortPatternClone = [...qSortPattern];\n  const overloadArrayCheck = [...columnLengthCheckArray];\n  const match = isEqual(columnLengthCheckArray, qSortPatternClone);\n\n  checkForColumnOverload(overloadArrayCheck, forcedSorts, totalStatements);\n\n  // to disable checking if unforced Q sorts allowed\n  if (forcedSorts === true) {\n    if (match === true) {\n      state.setState({ sortCompleted: true });\n      localStorage.setItem('sortCompleted', 'true');\n      state.setState({ isSortingCards: false });\n      localStorage.setItem('isSortingCards', 'false');\n    } else {\n      state.setState({ sortCompleted: false });\n      localStorage.setItem('sortCompleted', 'false');\n    }\n  }\n  return null;\n};\n\nexport default move;\n","// import state from \"../../store\";\n// import store from \"../../state\";\nimport state from '../state';\n// to reorder within the same column\nconst reorder = (\n  columnToBeReordered,\n  startIndex,\n  endIndex,\n  columnStatements\n) => {\n  // no re-ordering of statements list / it's arranged by flexbox \"order\" css property\n  if (columnToBeReordered === 'statements') {\n    return;\n  }\n  // let list = state.getState(columnList);\n  const list = columnStatements.vCols[columnToBeReordered];\n  console.log('TCL: list', JSON.stringify(list));\n\n  const result = [...list]; // Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  console.log('TCL: result', JSON.stringify(result));\n  // to save to state and auto update lists\n\n  // state.setState({\n  //   [columnList]: result\n  // });\n\n  columnStatements.vCols[columnToBeReordered] = [...result];\n\n  // store.dispatch.setColumnStatements(columnStatements);\n  state.setState({ columnStatements });\n\n  return null;\n};\n\nexport default reorder;\n","const getItemStyle = (isDragging, draggableStyle, cardWidth, cardHeight) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: `0 2px 0 2px`,\n  margin: `0 2px 8px 3px`,\n  lineHeight: `1em`,\n  fontSize: 15,\n  height: cardHeight,\n  width: cardWidth,\n  borderRadius: `5px`,\n  display: 'flex',\n  alignItems: 'center',\n  border: `1px solid #a8a8a8`,\n  // justifyContent: `center`,\n  // change background colour if dragging\n  textAlign: `center`,\n  background: isDragging ? '#e6bbad' : '#eeeeee',\n\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nexport default getItemStyle;\n","import state from '../state';\n// import state from '../../store';\n\n// card and column styling\nconst getListStyle = (\n  isDraggingOver,\n  props,\n  forcedSorts,\n  columnWidth,\n  columnColor\n) => {\n  let isUnderMaxCards;\n  if (forcedSorts === true) {\n    isUnderMaxCards = props.columnStatementsArray.length <= props.maxCards;\n  } else {\n    isUnderMaxCards = true;\n  }\n\n  // to set highlighting for column headers\n  if (isDraggingOver) {\n    state.setState({ draggingOverColumnId: props.columnId });\n  }\n\n  return {\n    background: isDraggingOver\n      ? 'lightblue'\n      : isUnderMaxCards\n      ? columnColor\n      : 'orange',\n    padding: `3px 5px 0px 5px`,\n\n    minWidth: columnWidth + 13,\n    marginTop: 0,\n    marginRight: 0,\n    minHeight: props.minHeight + 24,\n    marginBottom: 220,\n    borderRadius: `2px`,\n  };\n};\n\nexport default getListStyle;\n\n// border: 'solid 1px #ededed',\n","import './Sort.css';\nimport React from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { view } from 'react-easy-state';\nimport styled from 'styled-components';\nimport state from '../state';\nimport getItemStyle from './getItemStyle';\nimport getListStyle from './getListStyle';\n\n/* eslint react/prop-types: 0 */\n\nclass SortColumn extends React.Component {\n  render() {\n    const {\n      forcedSorts,\n      columnWidth,\n      cardHeight,\n      columnId,\n      sortValue,\n      columnStatementsArray,\n      qSortHeaderNumber,\n      columnColor,\n    } = this.props;\n\n    // had to push column sort value to state because didn't want to edit dnd library result object\n    // was't able to just pass it as a prop\n    return (\n      <Droppable droppableId={columnId}>\n        {(provided, snapshot) => {\n          if (snapshot.isDraggingOver) {\n            state.setState({ draggingOverColumnId: columnId });\n            state.setState({ currentSortValue: sortValue });\n          }\n\n          return (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(\n                snapshot.isDraggingOver,\n                this.props,\n                forcedSorts,\n                columnWidth,\n                columnColor\n              )}\n            >\n              <HeaderDiv data-react-beautiful-dnd-drag-handle=\"0\">\n                {qSortHeaderNumber}\n              </HeaderDiv>\n              {columnStatementsArray.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style,\n                        columnWidth,\n                        cardHeight\n                      )}\n                    >\n                      {item.statement}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          );\n        }}\n      </Droppable>\n    );\n  }\n}\n\nexport default view(SortColumn);\n\nconst HeaderDiv = styled.div`\n  text-align: center;\n  border: 1px solid black;\n  margin-bottom: 7px;\n  font-size: 25px;\n`;\n","// horizontal column styling\nconst getListStyleHori = (isDraggingOver, horiCardMinHeight) => ({\n  background: isDraggingOver ? 'lightblue' : '#e4e4e4',\n  display: 'flex',\n  paddingRight: 120,\n  width: 950,\n  minHeight: horiCardMinHeight,\n  overflowX: `scroll`,\n  flexDirection: 'row-reverse',\n});\n\nexport default getListStyleHori;\n","// card styling\nconst getItemStyleHori = (\n  isDragging,\n  draggableStyle,\n  sortValue,\n  cardColor,\n  columnWidth,\n  cardHeight\n) => {\n  let newSortValue = sortValue;\n  let newCardColor = cardColor;\n  // puts un-evaluated cards at the end of the list and set default color\n  if (isNaN(+newSortValue)) {\n    newSortValue = 999;\n  }\n\n  if (newCardColor === 'undefined') {\n    newCardColor = '#eeeeee';\n  }\n  return {\n    userSelect: 'none',\n    WebkitUserSelect: 'none',\n    lineHeight: `1em`,\n    fontSize: 15,\n    height: cardHeight,\n    minWidth: columnWidth,\n    maxWidth: columnWidth,\n    // padding: `15px, 2px, 2px, 0`,\n    paddingRight: 2,\n    paddingLeft: 2,\n    borderRadius: `5px`,\n    marginBottom: 5,\n    marginTop: 5,\n    marginRight: `2px`,\n    marginLeft: `2px`,\n    display: 'flex',\n    alignItems: 'center',\n    textAlign: `center`,\n    // border: `1px solid lightgray`,\n    order: newSortValue,\n    // change background color if dragging, otherwise pre-sort value color\n    background: isDragging ? '#e6bbad' : newCardColor,\n    // styles to apply on draggables\n    ...draggableStyle,\n  };\n};\n\nexport default getItemStyleHori;\n","import React from \"react\";\n// import styled from 'styled-components';\nimport { view } from \"react-easy-state\";\nimport state from \"../state\";\n\n// eslint-disable-next-line react/button-has-type\n/* eslint react/prop-types: 0 */\n\nconst handleClick = () => {\n  console.log(\"clicked\");\n  state.setState({ displayPostsort: true, displaySort: false });\n};\n\nconst SortCompletedMessageBox = props => {\n  const sortCompleted = state.getState(\"sortCompleted\");\n  // const sortCompleted = localStorage.getItem(\"sortCompleted\");\n  console.log(\"TCL: sortCompleted\", sortCompleted);\n\n  if (sortCompleted === true) {\n    return (\n      <div>\n        <p>{props.sortCompleteText}</p>\n        <nav>\n          <button type=\"button\" onClick={handleClick}>\n            Next\n          </button>\n        </nav>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default view(SortCompletedMessageBox);\n","import React from \"react\";\n// import styled from \"styled-components\";\n// import { useStore } from \"easy-peasy\";\nimport { view } from \"react-easy-state\";\nimport state from \"../state\";\n\nconst ColumnOverloadMessage = props => {\n  const columnOverload = state.getState(\"columnOverload\");\n  console.log(\"TCL: columnOverload\", columnOverload);\n  const overloadedColumn = state.getState(\"overloadedColumn\");\n\n  if (columnOverload) {\n    return (\n      <div>\n        <p>Column {overloadedColumn} has too many cards.</p>\n      </div>\n    );\n  }\n  return null;\n};\n\nexport default view(ColumnOverloadMessage);\n","import React from \"react\";\nimport styled from \"styled-components\";\n// import { useStore } from 'easy-peasy';\nimport { view } from \"react-easy-state\";\nimport state from \"../state\";\n\n/* eslint react/prop-types: 0 */\n\nconst NumberCardsSortedMessage = props => {\n  // const numSortedStatements = useStore(state => state.numSortedStatements);\n  const numSortedStatements = state.getState(\"numSortedStatements\");\n\n  // const isSortingCards = useStore(state => state.isSortingCards);\n  const isSortingCards = state.getState(\"isSortingCards\");\n  console.log(\"TCL: isSortingCards\", isSortingCards);\n  // const isSortingCards = localStorage.getItem(\"isSortingCards\");\n  console.log(\"TCL: isSortingCards\", isSortingCards);\n\n  if (isSortingCards === true) {\n    // if (true === true) {\n    return (\n      <CardsSortedDiv>\n        <p>\n          {numSortedStatements} of\n          {\" \" + props.totalStatements} cards sorted\n        </p>\n      </CardsSortedDiv>\n    );\n  }\n  return null;\n};\n\nexport default view(NumberCardsSortedMessage);\n\nconst CardsSortedDiv = styled.div``;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport \"./Sort.css\";\nimport { view } from \"react-easy-state\";\nimport styled from \"styled-components\";\nimport move from \"./move\";\nimport reorder from \"./reorder\";\nimport state from \"../state\";\nimport SortColumn from \"./SortColumn\";\nimport getListStyleHori from \"./getListStyleHori\";\nimport getItemStyleHori from \"./getItemStyleHori\";\nimport SortCompletedMessage from \"./SortCompletedMessage\";\nimport ColumnOverloadMessage from \"./ColumnOverloadMessage\";\nimport NumberCardsSortedMessage from \"./NumberCardsSortedMessage\";\nimport calculateTimeOnPage from \"../Utils/calculateTimeOnPage\";\n\n/* eslint react/prop-types: 0 */\n\nlet startTime;\n\nclass Sort extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      draggingOverColumnId: \"column99\"\n    };\n  }\n\n  componentDidMount() {\n    startTime = Date.now();\n  }\n\n  componentWillUnmount() {\n    calculateTimeOnPage(startTime, \"sortPage\", \"SortPage\");\n  }\n\n  // fire move and re-order functions\n  onDragEnd = result => {\n    /*\n    example result object:\n    result {\"draggableId\":\"s1\",\"type\":\"DEFAULT\",\n    \"source\":{\"droppableId\":\"statements\",\"index\":0},\n    \"destination\":{\"droppableId\":\"column1\",\"index\":0},\n    \"reason\":\"DROP\"}\n    */\n\n    // pull data from localStorage\n    const columnStatements = JSON.parse(\n      localStorage.getItem(\"columnStatements\")\n    );\n\n    // source and destination are objects\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    // if moving inside the same column\n    if (source.droppableId === destination.droppableId) {\n      reorder(\n        source.droppableId,\n        source.index,\n        destination.index,\n        columnStatements\n      );\n\n      this.forceUpdate();\n    } else {\n      // moving to another column\n\n      // source.droppableId give orgin id => \"statements\" or \"columnN1\"\n      // sourceList is cards in that origin\n      // gather data to send to move function\n      let sourceListArray;\n      let destinationListArray;\n      if (source.droppableId === \"statements\") {\n        sourceListArray = columnStatements.statementList;\n      } else {\n        sourceListArray = columnStatements.vCols[source.droppableId];\n      }\n      if (destination.droppableId === \"statements\") {\n        destinationListArray = columnStatements.statementList;\n      } else {\n        destinationListArray = columnStatements.vCols[destination.droppableId];\n      }\n      const droppableSource = source;\n      const droppableDestination = destination;\n      const { totalStatements, sortCharacteristics } = this.props;\n      move(\n        sourceListArray,\n        destinationListArray,\n        droppableSource,\n        droppableDestination,\n        columnStatements,\n        totalStatements,\n        sortCharacteristics\n      );\n\n      // store.dispatch.setDraggingOverColumnId('column99');\n      state.setState({ draggingOverColumnId: \"column99\" });\n\n      // global state updates\n      state.setState({ setColumnStatements: columnStatements });\n      localStorage.setItem(\n        \"columnStatements\",\n        JSON.stringify(columnStatements)\n      );\n\n      // if (columnStatements.statementList.length === 0) {\n      //   state.setState('isSortingCards', false);\n      //   state.setState('sortCompleted', true);\n      // }\n\n      this.forceUpdate();\n    }\n  }; // end of dragEnd helper function\n\n  render() {\n    const {\n      cardHeight,\n      columnWidth,\n      sortCompleteText,\n      nextButtonText,\n      horiCardMinHeight,\n      columnColorsArray,\n      sortCharacteristics,\n      totalStatements\n    } = this.props;\n\n    // console.log(\n    //   \"TCL: Sort -> render -> this.props\",\n    //   JSON.stringify(this.props, null, 2)\n    // );\n\n    // const { sortCharacteristics, totalStatements } = this.props;\n    const changeColumnHeaderColor = columnId => {\n      this.setState({ draggingOverColumnId: columnId });\n    };\n\n    // pull data from localStorage\n    const columnStatements = JSON.parse(\n      localStorage.getItem(\"columnStatements\")\n    );\n\n    const statements = columnStatements.statementList;\n    // const overloadedColumn = store.getState().overloadedColumn;\n    const overloadedColumn = state.getState(\"overloadedColumn\");\n\n    // MAP out SORT COLUMNS component before render\n    // code inside render so that column lists update automatically\n    const qSortHeaders = [...sortCharacteristics.qSortHeaders];\n    const qSortHeaderNumbers = [...sortCharacteristics.qSortHeaderNumbers];\n    const qSortPattern = [...sortCharacteristics.qSortPattern];\n    const columns = qSortHeaders.map((value, index, highlightedColHeader) => {\n      const columnId = `column${qSortHeaders[index]}`;\n      const sortValue = qSortHeaderNumbers[index];\n      const columnColor = columnColorsArray[index];\n      // columnColors -> redBase #ff7f7f greenBase #32cd32\n\n      return (\n        <SortColumn\n          key={columnId}\n          minHeight={qSortPattern[index] * (cardHeight + 8) + 15}\n          maxCards={qSortPattern[index]}\n          columnId={columnId}\n          columnStatementsArray={columnStatements.vCols[columnId]}\n          forcedSorts={sortCharacteristics.forcedSorts}\n          columnWidth={columnWidth}\n          cardHeight={cardHeight}\n          sortValue={sortValue}\n          columnColor={columnColor}\n          qSortHeaderNumber={qSortHeaderNumbers[index]}\n          changeColumnHeaderColor={changeColumnHeaderColor}\n        />\n      );\n    }); // end map of sort columns\n\n    // returning main content => horizontal feeder\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"rootDiv\">\n          {/* <Headers\n            className=\"hoverBlue\"\n            qSortHeaders={qSortHeaders}\n            qSortHeaderNumbers={qSortHeaderNumbers}\n            columnWidth={columnWidth}\n            headerColorsArray={headerColorsArray}\n            highlightedColHeader={this.state.draggingOverColumnId}\n          /> */}\n          {columns}\n          <SortFooterDiv>\n            <div className=\"cardSlider\">\n              <Droppable droppableId=\"statements\" direction=\"horizontal\">\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    style={getListStyleHori(\n                      snapshot.isDraggingOver,\n                      horiCardMinHeight\n                    )}\n                  >\n                    {statements.map((item, index) => (\n                      <Draggable\n                        key={item.id}\n                        draggableId={item.id}\n                        index={index}\n                        sortValue={item.sortValue}\n                        cardColor={item.cardColor}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            className={`${item.cardColor}`}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={getItemStyleHori(\n                              snapshot.isDragging,\n                              provided.draggableProps.style,\n                              `${item.sortValue}`,\n                              `${item.cardColor}`,\n                              columnWidth,\n                              cardHeight\n                            )}\n                          >\n                            {item.statement}\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n              <FooterMessageBox>\n                <SortCompletedMessage\n                  sortCompleteText={sortCompleteText}\n                  nextButtonText={nextButtonText}\n                />\n                <ColumnOverloadMessage overloadedColumn={overloadedColumn} />\n                <NumberCardsSortedMessage totalStatements={totalStatements} />\n              </FooterMessageBox>\n            </div>\n          </SortFooterDiv>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default view(Sort);\n\nconst SortFooterDiv = styled.div`\n  flex-direction: row;\n  background: #e4e4e4;\n  position: fixed;\n  padding-right: 120px;\n  left: 0px;\n  bottom: 0;\n  width: 100%;\n  height: ${props => `${+props.cardHeight + 20}px;`};\n`;\n\nconst FooterMessageBox = styled.div`\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  flex-basis: 100px;\n  padding-right: 5px;\n  padding-left: 5px;\n  width: 100px;\n  height: ${props => `${+props.cardHeight}px`};\n  border: 2px solid lightgray;\n  text-align: center;\n  border: 2px solid black;\n\n  p {\n    padding: 0px;\n    margin-top: 10px;\n    font-size: 20px;\n    color: #3273dc;\n  }\n`;\n\n/*\n<div className=\"footerMessageBox\">\n  <SortCompletedMessage\n    sortCompleteText={sortCompleteText}\n    nextButtonText={nextButtonText}\n  />\n  <ColumnOverloadMessage overloadedColumn={overloadedColumn} />\n  <NumberCardsSortedMessage totalStatements={totalStatements} />\n</div>\n\nheight: 150px;\n.sortFooter {\n  display: flex;\n  flex-direction: row;\n  background: #e4e4e4;\n  position: fixed;\n  left: 0px;\n  bottom: 0;\n  width: 100%;\n  height: 150px;\n}\n*/\n\n/* DO NOT DELETE - important\n\"columnColorsArray\": [\n      \"#ffb2b2\"\n      \"#ffbfbf\",\n      \"#ffcbcb\",\n      \"#ffd8d8\",\n      \"#ffe5e5\",\n      \"#f5f5f5\",\n      \"#d6f5d6\",\n      \"#c1f0c1\",\n      \"#adebad\",\n      \"#98E698\",\n      \"#84e184\"\n    ],\n*/\n","// card and column styling\nconst getPostSortCardStyleHigh = (cardHeight, cardWidth) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  padding: `0 2px 0 2px`,\n  margin: `5px 5px 5px 5px`,\n  lineHeight: `1em`,\n  fontSize: 15,\n  maxHeight: `${cardHeight}px`,\n  maxWidth: `${cardWidth}px`,\n  borderRadius: `5px`,\n  display: 'flex',\n  alignItems: 'center',\n  border: `2px solid black`,\n  background: `#f6f6f6`,\n  textAlign: `center`,\n});\n\nexport default getPostSortCardStyleHigh;\n","import React, { Component } from 'react';\nimport getPostSortCardStyleHigh from './getPostSortCardStyleHigh';\n\n/* eslint react/prop-types: 0 */\n\nconst styles = {\n  container: {\n    width: '80%',\n    border: `2px solid black`,\n    marginTop: 50,\n    marginLeft: '10%',\n    borderRadius: `3px`,\n  },\n  cardAndTextHolder: {\n    display: `flex`,\n    alignContent: `center`,\n    background: `#7e7e7e`,\n  },\n  textHolder: {\n    marginTop: 5,\n    flexGrow: 5,\n  },\n  cardTag: {\n    width: `100%`,\n    background: `lightpink`,\n    color: `black`,\n    textAlign: `center`,\n  },\n};\n\n// LowCards example ===> {high: [\"column4\"], middle: [\"column0\"], low: [\"columnN4\"]}\n\nclass LowCards extends Component {\n  // on blur, get text and add comment to card object\n  onBlur = (event, columnStatements, columnDisplay, itemId) => {\n    const cards = [...columnStatements.vCols[columnDisplay]];\n    const targetCard = event.target.id;\n    const userEnteredText = event.target.value;\n\n    const identifier = `${columnDisplay}_Card${itemId + 1}`;\n\n    // pull in state object for comments\n    const statementCommentsObj =\n      JSON.parse(localStorage.getItem('statementCommentsObj')) || {};\n\n    // to update just the card that changed\n    cards.map(el => {\n      if (el.id === targetCard) {\n        const comment3 = userEnteredText;\n        // remove new line and commas to make csv export easier\n        const comment2 = comment3.replace(/\\n/g, ' ');\n        const comment = comment2.replace(/,/g, ' ');\n        // assign to main data object for confirmation / debugging\n        el.comment = comment;\n        // assign to comments object\n        statementCommentsObj[identifier] = `${el.id}>>>${comment}`;\n      }\n      return el;\n    });\n\n    columnStatements.vCols[columnDisplay] = [...cards];\n\n    localStorage.setItem(\n      'statementCommentsObj',\n      JSON.stringify(statementCommentsObj)\n    );\n\n    localStorage.setItem('columnStatements', JSON.stringify(columnStatements));\n  }; // end onBlur\n\n  render() {\n    const {\n      height,\n      width,\n      columnDisplay,\n      disagreeObj,\n      lowCards,\n      columnStatements,\n    } = this.props;\n    const { disagreeText, placeholder } = disagreeObj;\n\n    return lowCards.map((item, index) => (\n      <div key={item.statement} style={styles.container}>\n        <div style={styles.cardTag}>{disagreeText}</div>\n        <div style={styles.cardAndTextHolder}>\n          <div />\n          <div style={getPostSortCardStyleHigh(height, width)}>\n            {item.statement}\n          </div>\n          <div className=\"tagContainerDiv\">\n            <textarea\n              data-gramm_editor=\"false\"\n              id={item.id}\n              className=\"commentTextArea\"\n              placeholder={placeholder}\n              defaultValue={item.comment}\n              onBlur={e => {\n                this.onBlur(e, columnStatements, columnDisplay, index);\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    ));\n  }\n}\n\nexport default LowCards;\n","// import state from \"../../store\";\nimport React, { Component } from 'react';\nimport getPostSortCardStyleHigh from './getPostSortCardStyleHigh';\n\n/* eslint react/prop-types: 0 */\n\nconst styles = {\n  container: {\n    width: '80%',\n    border: `2px solid black`,\n    marginTop: 50,\n    marginLeft: '10%',\n    borderRadius: `3px`,\n  },\n  cardAndTextHolder: {\n    display: `flex`,\n    alignContent: `center`,\n    background: `#7e7e7e`,\n  },\n  textHolder: {\n    marginTop: 5,\n    flexGrow: 5,\n  },\n  cardTag: {\n    width: `100%`,\n    background: `lightpink`,\n    color: `black`,\n    textAlign: `center`,\n  },\n};\n\n// LowCards example ===> {high: [\"column4\"], middle: [\"column0\"], low: [\"columnN4\"]}\n\nclass LowCards extends Component {\n  // on blur, get text and add comment to card object\n  onBlur = (event, columnStatements, columnDisplay, itemId) => {\n    const cards = [...columnStatements.vCols[columnDisplay]];\n    const targetCard = event.target.id;\n    const userEnteredText = event.target.value;\n\n    const identifier = `${columnDisplay}_Card${itemId + 1}`;\n\n    // pull in state object for comments\n    const statementCommentsObj =\n      JSON.parse(localStorage.getItem('statementCommentsObj')) || {};\n\n    // to update just the card that changed\n    cards.map(el => {\n      if (el.id === targetCard) {\n        const comment3 = userEnteredText;\n        // remove new line and commas to make csv export easier\n        const comment2 = comment3.replace(/\\n/g, ' ');\n        const comment = comment2.replace(/,/g, ' ');\n        // assign to main data object for confirmation / debugging\n        el.comment = comment;\n        // assign to comments object\n        statementCommentsObj[identifier] = `${el.id}>>>${comment}`;\n      }\n      return el;\n    });\n\n    columnStatements.vCols[columnDisplay] = [...cards];\n\n    localStorage.setItem(\n      'statementCommentsObj',\n      JSON.stringify(statementCommentsObj)\n    );\n\n    localStorage.setItem('columnStatements', JSON.stringify(columnStatements));\n  }; // end onBlur\n\n  render() {\n    const {\n      height,\n      width,\n      columnDisplay,\n      lowCards2,\n      columnStatements,\n      disagreeObj,\n    } = this.props;\n    const { disagreeText, placeholder } = disagreeObj;\n\n    return lowCards2.map((item, index) => (\n      <div key={item.statement} style={styles.container}>\n        <div style={styles.cardTag}>{disagreeText}</div>\n        <div style={styles.cardAndTextHolder}>\n          <div />\n          <div style={getPostSortCardStyleHigh(height, width)}>\n            {item.statement}\n          </div>\n          <div className=\"tagContainerDiv\">\n            <textarea\n              data-gramm_editor=\"false\"\n              id={item.id}\n              className=\"commentTextArea\"\n              placeholder={placeholder}\n              defaultValue={item.comment}\n              onBlur={e => {\n                this.onBlur(e, columnStatements, columnDisplay, index);\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    ));\n  }\n}\n\nexport default LowCards;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport getPostSortCardStyleHigh from './getPostSortCardStyleHigh';\n// import './highCards.css';\n/* eslint react/prop-types: 0 */\n\nconst styles = {\n  cardAndTextHolder: {\n    display: `flex`,\n    alignContent: `center`,\n    background: `#7e7e7e`,\n  },\n  textHolder: {\n    marginTop: 5,\n    padding: 2,\n  },\n  cardTag: {\n    width: `100%`,\n    background: `#c7f6c7`,\n    color: `black`,\n    textAlign: `center`,\n  },\n};\n\n// format example ===> {high: [\"column4\"], middle: [\"column0\"], low: [\"columnN4\"]}\n\nclass HighCards extends Component {\n  // on leaving card comment section,\n  onBlur = (event, columnStatements, columnDisplay, itemId) => {\n    const cards = columnStatements.vCols[columnDisplay];\n    const targetCard = event.target.id;\n    const userEnteredText = event.target.value;\n\n    const identifier = `${columnDisplay}_Card${itemId + 1}`;\n\n    // pull in state object for comments\n    const statementCommentsObj =\n      JSON.parse(localStorage.getItem('statementCommentsObj')) || {};\n\n    // to update just the card that changed\n    cards.map(el => {\n      if (el.id === targetCard) {\n        const comment3 = userEnteredText;\n        // remove new line and commas to make csv export easier\n        const comment2 = comment3.replace(/\\n/g, ' ');\n        const comment = comment2.replace(/,/g, ' ');\n        // assign to main data object for confirmation / debugging\n        el.comment = comment;\n\n        // assign to comments object\n        statementCommentsObj[identifier] = `${el.id}>>>${comment}`;\n      }\n      return el;\n    });\n\n    localStorage.setItem(\n      'statementCommentsObj',\n      JSON.stringify(statementCommentsObj)\n    );\n\n    localStorage.setItem('columnStatements', JSON.stringify(columnStatements));\n  }; // end onBlur\n\n  render() {\n    const {\n      height,\n      width,\n      columnDisplay,\n      agreeObj,\n      highCards,\n      columnStatements,\n    } = this.props;\n    const { agreeText, placeholder } = agreeObj;\n\n    return highCards.map((item, index) => (\n      <Container key={item.statement}>\n        <div style={styles.cardTag}>{agreeText}</div>\n        <div style={styles.cardAndTextHolder}>\n          <div />\n          <div style={getPostSortCardStyleHigh(height, width)}>\n            {item.statement}\n          </div>\n          <div className=\"tagContainerDiv\">\n            <textarea\n              data-gramm_editor=\"false\"\n              id={item.id}\n              className=\"commentTextArea\"\n              placeholder={placeholder}\n              defaultValue={item.comment}\n              onBlur={e => {\n                this.onBlur(e, columnStatements, columnDisplay, index);\n              }}\n            />\n          </div>\n        </div>\n      </Container>\n    ));\n  }\n}\n\nexport default HighCards;\n\nconst Container = styled.div`\n   width: 80%;\n    margin-top: 50px;\n    margin-left: 10%;\n    border-radius: 3px;\n    border: 2px solid red';\n`;\n","import \"./PostSort.css\";\nimport React, { Component } from \"react\";\nimport LowCards from \"./LowCards\";\nimport LowCards2 from \"./LowCards2\";\nimport HighCards from \"./HighCards\";\nimport HighCards2 from \"./HighCards2\";\nimport NeutralCards from \"./NeutralCards\";\nimport state from \"../state\";\nimport calculateTimeOnPage from \"../Utils/calculateTimeOnPage\";\n// import displayDataObject from \"../../Utils/displayDataObjectPostSort\";\n\n/* eslint react/prop-types: 0 */\n\nconst styles = {\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  width: \"100%\",\n  paddingBottom: 25\n};\n\nlet startTime;\n\nconst handleClick = () => {\n  state.setState({ displaySurvey: true, displayPostsort: false });\n};\n\nclass PostSort extends Component {\n  componentDidMount() {\n    startTime = Date.now();\n  }\n\n  componentWillUnmount() {\n    calculateTimeOnPage(startTime, \"postSortPage\", \"PostSortPage\");\n  }\n\n  render() {\n    // pull data from localStorage\n    const columnStatements = JSON.parse(\n      localStorage.getItem(\"columnStatements\")\n    );\n    // if (!columnStatements) {\n    //   console.log(\"no local storage\");\n    //   columnStatements = store.getState().columnStatements;\n    // }\n\n    console.log(\n      \"TCL: PostSort -> render -> columnStatements\",\n      columnStatements\n    );\n\n    const {\n      titleText,\n      columnWidth,\n      instructionsText,\n      cardHeight,\n      agreeObj,\n      disagreeObj,\n      neutralObj\n    } = this.props;\n\n    console.log(\"TCL: PostSort -> render -> this.props\", this.props);\n\n    const highCards = columnStatements.vCols[agreeObj.columnDisplay];\n    const highCards2 = columnStatements.vCols[agreeObj.columnDisplay2];\n    const neutralCards = columnStatements.vCols[neutralObj.columnDisplay];\n    const lowCards = columnStatements.vCols[disagreeObj.columnDisplay];\n    const lowCards2 = columnStatements.vCols[disagreeObj.columnDisplay2];\n\n    return (\n      <div>\n        <div className=\"titleDiv\">\n          <h1>{titleText}</h1>\n          <h3>{instructionsText}</h3>\n          <button\n            className=\"postSortButton\"\n            type=\"button\"\n            onClick={handleClick}\n          >\n            Next\n          </button>\n        </div>\n        <div className=\"scrollableDiv\">\n          <div style={styles}>\n            <HighCards\n              agreeObj={agreeObj}\n              height={cardHeight}\n              width={columnWidth}\n              highCards={highCards}\n              columnDisplay={agreeObj.columnDisplay}\n              columnStatements={columnStatements}\n            />\n\n            {agreeObj.displaySecondColumn && (\n              <HighCards2\n                agreeObj={agreeObj}\n                height={cardHeight}\n                width={columnWidth}\n                highCards2={highCards2}\n                columnDisplay={agreeObj.columnDisplay2}\n                columnStatements={columnStatements}\n              />\n            )}\n\n            {neutralObj.displayNeutralObjects && (\n              <NeutralCards\n                neutralObj={neutralObj}\n                height={cardHeight}\n                width={columnWidth}\n                columnDisplay={neutralObj.columnDisplay}\n                neutralCards={neutralCards}\n                columnStatements={columnStatements}\n              />\n            )}\n\n            {disagreeObj.displaySecondColumn && (\n              <LowCards2\n                disagreeObj={disagreeObj}\n                height={cardHeight}\n                width={columnWidth}\n                lowCards2={lowCards2}\n                columnStatements={columnStatements}\n                columnDisplay={disagreeObj.columnDisplay2}\n              />\n            )}\n\n            <LowCards\n              disagreeObj={disagreeObj}\n              height={cardHeight}\n              width={columnWidth}\n              lowCards={lowCards}\n              columnStatements={columnStatements}\n              columnDisplay={disagreeObj.columnDisplay}\n            />\n          </div>\n        </div>\n        <div className=\"footer fix-footer postSortFooter\">\n          <nav />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostSort;\n","import React from 'react';\nimport * as Survey from 'survey-react';\nimport prepareDataForPost from '../SubmitData/prepareDataForPost';\nimport './survey.css';\nimport calculateTimeOnPage from '../Utils/calculateTimeOnPage';\nimport state from '../state';\n\n/* eslint react/prop-types: 0 */\n\nlet startTime;\n\nclass SurveyForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toSubmitData: false,\n    };\n    this.sendDataToSurver.bind(this);\n  }\n\n  // componentWillMount() {\n  //   Survey.Survey.cssType = \"bootstrap\";\n  // Survey.defaultBootstrapCss.navigationButton = \"btn btn-green\";\n  // }\n\n  componentDidMount() {\n    startTime = Date.now();\n  }\n\n  // componentWillUnmount() {\n  //   calculateTimeOnPage(startTime, 'preSortPage', 'PreSortPage');\n  // }\n\n  sendDataToSurver = result => {\n    console.log('TCL: SurveyForm -> result', result);\n    console.log('sentdatatosurver called');\n    calculateTimeOnPage(startTime, 'surveyPage', 'SurveyPage');\n    const { commentArrays } = this.props;\n    prepareDataForPost(commentArrays, result);\n    // store.dispatch.setSurveyPageResuts(result);\n\n    this.setState(() => ({\n      toSubmitData: true,\n    }));\n  };\n\n  render() {\n    if (this.state.toSubmitData === true) {\n      state.setState({ displaySubmitData: true, displaySurvey: false });\n    }\n\n    // let firebase = window.firebase;\n    const json = JSON.stringify(this.props);\n    console.log('TCL: SurveyForm -> render -> json', this.props.pages);\n\n    return (\n      <React.Fragment>\n        <div>\n          <Survey.Survey json={json} onComplete={this.sendDataToSurver} />\n        </div>\n        <div className=\"footer fix-footer postSortFooter\">\n          <nav />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SurveyForm;\n","// import state from \"../../store\";\nimport React, { Component } from 'react';\nimport getPostSortCardStyleHigh from './getPostSortCardStyleHigh';\n\n/* eslint react/prop-types: 0 */\n\nconst styles = {\n  container: {\n    width: '80%',\n    border: `2px solid black`,\n    marginTop: 50,\n    marginLeft: '10%',\n    borderRadius: `3px`,\n  },\n  cardAndTextHolder: {\n    display: `flex`,\n    alignContent: `center`,\n    background: `#7e7e7e`,\n  },\n  textHolder: {\n    marginTop: 5,\n    flexGrow: 5,\n  },\n  cardTag: {\n    width: `100%`,\n    background: `#c7f6c7`,\n    color: `black`,\n    textAlign: `center`,\n  },\n};\n\n// format example ===> {high: [\"column4\"], middle: [\"column0\"], low: [\"columnN4\"]}\n\nclass HighCards extends Component {\n  // on leaving card comment section,\n  onBlur = (event, columnStatements, columnDisplay, itemId) => {\n    const cards = columnStatements.vCols[columnDisplay];\n    const targetCard = event.target.id;\n    const userEnteredText = event.target.value;\n\n    const identifier = `${columnDisplay}_Card${itemId + 1}`;\n\n    // pull in state object for comments\n    const statementCommentsObj =\n      JSON.parse(localStorage.getItem('statementCommentsObj')) || {};\n\n    // to update just the card that changed\n    cards.map(el => {\n      if (el.id === targetCard) {\n        const comment3 = userEnteredText;\n        // remove new line and commas to make csv export easier\n        const comment2 = comment3.replace(/\\n/g, ' ');\n        const comment = comment2.replace(/,/g, ' ');\n        // assign to main data object for confirmation / debugging\n        el.comment = comment;\n\n        // assign to comments object\n        statementCommentsObj[identifier] = `${el.id}>>>${comment}`;\n      }\n      return el;\n    });\n\n    localStorage.setItem(\n      'statementCommentsObj',\n      JSON.stringify(statementCommentsObj)\n    );\n\n    localStorage.setItem('columnStatements', JSON.stringify(columnStatements));\n  }; // end onBlur\n\n  render() {\n    const {\n      height,\n      width,\n      columnDisplay,\n      agreeObj,\n      highCards2,\n      columnStatements,\n    } = this.props;\n    const { agreeText, placeholder } = agreeObj;\n\n    return highCards2.map((item, index) => (\n      <div key={item.statement} style={styles.container}>\n        <div style={styles.cardTag}>{agreeText}</div>\n        <div style={styles.cardAndTextHolder}>\n          <div />\n          <div style={getPostSortCardStyleHigh(height, width)}>\n            {item.statement}\n          </div>\n          <div className=\"tagContainerDiv\">\n            <textarea\n              data-gramm_editor=\"false\"\n              id={item.id}\n              className=\"commentTextArea\"\n              placeholder={placeholder}\n              defaultValue={item.comment}\n              onBlur={e => {\n                this.onBlur(e, columnStatements, columnDisplay, index);\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    ));\n  }\n}\n\nexport default HighCards;\n","import React, { Component } from 'react';\nimport getPostSortCardStyleHigh from './getPostSortCardStyleHigh';\n\n/* eslint react/prop-types: 0 */\n\nconst styles = {\n  container: {\n    width: '80%',\n    border: `2px solid black`,\n    marginTop: 50,\n    marginLeft: '10%',\n    borderRadius: `3px`,\n  },\n  cardAndTextHolder: {\n    display: `flex`,\n    alignContent: `center`,\n    background: `#7e7e7e`,\n  },\n  textHolder: {\n    marginTop: 5,\n    flexGrow: 5,\n  },\n  cardTag: {\n    width: `100%`,\n    background: `darkgray`,\n    color: `black`,\n    textAlign: `center`,\n  },\n};\n\n// LowCards example ===> {high: [\"column4\"], middle: [\"column0\"], low: [\"columnN4\"]}\n\nclass NeutralCards extends Component {\n  // on blur, get text and add comment to card object\n  onBlur = (event, columnStatements, columnDisplay, itemId) => {\n    const cards = columnStatements.vCols[columnDisplay];\n    const targetCard = event.target.id;\n    const userEnteredText = event.target.value;\n\n    const identifier = `${columnDisplay}_Card${itemId + 1}`;\n\n    // pull in state object for comments\n    const statementCommentsObj =\n      JSON.parse(localStorage.getItem('statementCommentsObj')) || {};\n\n    // to update just the card that changed\n    cards.map(el => {\n      if (el.id === targetCard) {\n        const comment3 = userEnteredText;\n        // remove new line and commas to make csv export easier\n        const comment2 = comment3.replace(/\\n/g, ' ');\n        const comment = comment2.replace(/,/g, ' ');\n        // assign to main data object for confirmation / debugging\n        el.comment = comment;\n        // assign to comments object\n        statementCommentsObj[identifier] = `${el.id}>>>${comment}`;\n      }\n      return el;\n    });\n\n    localStorage.setItem(\n      'statementCommentsObj',\n      JSON.stringify(statementCommentsObj)\n    );\n\n    localStorage.setItem('columnStatements', JSON.stringify(columnStatements));\n  }; // end onBlur\n\n  render() {\n    const {\n      height,\n      width,\n      columnDisplay,\n      neutralObj,\n      neutralCards,\n      columnStatements,\n    } = this.props;\n    const { neutralText, placeholder } = neutralObj;\n\n    return neutralCards.map((item, index) => (\n      <div key={item.statement} style={styles.container}>\n        <div style={styles.cardTag}>{neutralText}</div>\n        <div style={styles.cardAndTextHolder}>\n          <div />\n          <div style={getPostSortCardStyleHigh(height, width)}>\n            {item.statement}\n          </div>\n          <div className=\"tagContainerDiv\">\n            <textarea\n              data-gramm_editor=\"false\"\n              id={item.id}\n              className=\"commentTextArea\"\n              placeholder={placeholder}\n              defaultValue={item.comment}\n              onBlur={e => {\n                this.onBlur(e, columnStatements, columnDisplay, index);\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    ));\n  }\n}\n\nexport default NeutralCards;\n","const calculateTotalProjectTime = (\n  preSortTime,\n  sortTime,\n  postSortTime,\n  surveyTime\n) => {\n  let hours;\n  let minutes;\n  let seconds;\n\n  const preSortTimeArray = preSortTime.split(':').map(Number);\n  const sortTimeArray = sortTime.split(':').map(Number);\n  const postSortTimeArray = postSortTime.split(':').map(Number);\n  const surveyTimeArray = surveyTime.split(':').map(Number);\n\n  seconds =\n    preSortTimeArray[2] +\n    sortTimeArray[2] +\n    postSortTimeArray[2] +\n    surveyTimeArray[2];\n\n  minutes =\n    preSortTimeArray[1] +\n    sortTimeArray[1] +\n    postSortTimeArray[1] +\n    surveyTimeArray[1];\n\n  hours =\n    preSortTimeArray[0] +\n    sortTimeArray[0] +\n    postSortTimeArray[0] +\n    surveyTimeArray[0];\n\n  const additionalMinutes = Math.floor(seconds / 60);\n  let remainingSeconds = seconds - additionalMinutes * 60;\n\n  minutes += additionalMinutes;\n\n  const additionalHours = Math.floor(minutes / 60);\n  let remainingMinutes = minutes - additionalHours * 60;\n\n  hours += additionalHours;\n\n  if (remainingSeconds < 10) {\n    remainingSeconds = `0${remainingSeconds}`;\n  }\n\n  if (remainingMinutes < 10) {\n    remainingMinutes = `0${remainingMinutes}`;\n  }\n\n  const totalCumulativeTime = `${hours}:${remainingMinutes}:${remainingSeconds}`;\n\n  return totalCumulativeTime;\n};\n\nexport default calculateTotalProjectTime;\n","import includes from 'lodash/includes';\nimport calculateTotalProjectTime from './calculateTotalProjectTime';\nimport getFormattedViewTime from '../Utils/getFormattedViewTime';\n\nconst prepareDataForPost = (commentArrays, surveyResults2) => {\n  console.log('TCL: prepareDataForPost -> surveyResults2', surveyResults2);\n  const surveyResults = surveyResults2.data;\n  const columnStatements = JSON.parse(localStorage.getItem('columnStatements'));\n\n  const endDate = getFormattedViewTime();\n\n  // let columnStatements = store.getState().columnStatements;\n  const resultsJson = {};\n  resultsJson.randomId8 = localStorage.getItem('randomId8');\n  resultsJson.randomId16 = localStorage.getItem('randomId16');\n  resultsJson.participantName = localStorage.getItem(\"participantName\");\n\n  resultsJson.startDate = localStorage.getItem('startDate');\n  resultsJson.endDate = endDate;\n\n  resultsJson.preSortPageLastAccess = localStorage.getItem(\n    'setPreSortPageLastAccess'\n  );\n\n  resultsJson.sortPageLastAccess = localStorage.getItem(\n    'setSortPageLastAccess'\n  );\n\n  resultsJson.postSortPageLastAccess = localStorage.getItem(\n    'setPostSortPageLastAccess'\n  );\n\n  resultsJson.surveyPageLastAccess = localStorage.getItem(\n    'setSurveyPageLastAccess'\n  );\n\n  const preSortTime = localStorage.getItem('setPreSortPageDurationFormatted');\n  const sortTime = localStorage.getItem('setSortPageDurationFormatted');\n  const postSortTime = localStorage.getItem('setPostSortPageDurationFormatted');\n  const surveyTime = localStorage.getItem('setSurveyPageDurationFormatted');\n\n  const totalProjectTime = calculateTotalProjectTime(\n    preSortTime,\n    sortTime,\n    postSortTime,\n    surveyTime\n  );\n\n  resultsJson.preSortPageDuration = preSortTime;\n  resultsJson.sortPageDuration = sortTime;\n  resultsJson.postSortPageDuration = postSortTime;\n  resultsJson.surveyPageDuration = surveyTime;\n  resultsJson.totalProjectTime = totalProjectTime;\n\n  // set up postSort comments in object\n  const lookUpTable = {\n    columnN6: -6,\n    columnN5: -5,\n    columnN4: -4,\n    columnN3: -3,\n    columnN2: -2,\n    columnN1: -1,\n    column0: 0,\n    column1: 1,\n    column2: 2,\n    column3: 3,\n    column4: 4,\n    column5: 5,\n    column6: 6,\n    column7: 7,\n    column8: 8,\n    column9: 9,\n    column10: 10,\n    column11: 11,\n    column12: 12,\n    column13: 13,\n  };\n\n  const sortValueAssignedArray = [];\n  const commentKeys = [];\n  const columnStatementsVcolsKeys = Object.keys(columnStatements.vCols);\n\n  // iterate through all sort columns\n  for (let i = 0; i < columnStatementsVcolsKeys.length; i++) {\n    // iterate within each sort column\n    const identifier = columnStatementsVcolsKeys[i];\n\n    for (let j = 0; j < columnStatements.vCols[identifier].length; j++) {\n      // assign sort values\n      columnStatements.vCols[identifier][j].sortValue = lookUpTable[identifier];\n      // setup for comments integration\n      if (includes(commentArrays, identifier)) {\n        commentKeys.push(`${identifier}_Card${j + 1}`);\n      }\n    }\n    sortValueAssignedArray.push(...columnStatements.vCols[identifier]);\n  }\n\n  // sort objects in array\n  sortValueAssignedArray.sort((a, b) =>\n    a.statementNum > b.statementNum ? 1 : -1\n  );\n  // assign the appropriate sort value to the string\n  let sortString = '';\n  for (let k = 0; k < sortValueAssignedArray.length; k++) {\n    if (sortValueAssignedArray[k].sortValue >= 0) {\n      sortString = `${sortString}+${sortValueAssignedArray[k].sortValue}|`;\n    } else {\n      sortString = `${sortString + sortValueAssignedArray[k].sortValue}|`;\n    }\n  }\n  // trim last bar from string\n  sortString = sortString.slice(0, -1);\n\n  resultsJson.sort = sortString;\n\n  let statementCommentsObj = JSON.parse(\n    localStorage.getItem('statementCommentsObj')\n    );\n    if (statementCommentsObj === null) {\n      statementCommentsObj = {};\n    }\n    console.log(\"TCL: prepareDataForPost -> statementCommentsObj\", JSON.stringify(statementCommentsObj));\n  // CREATE COMMENT OBJECT\n  for (let m = 0; m < commentKeys.length; m++) {\n    const comment = statementCommentsObj[commentKeys[m]];\n    if (comment) {\n      resultsJson[commentKeys[m]] = comment;\n    } else {\n      resultsJson[commentKeys[m]] = 'no comment entered';\n    }\n  }\n\n  // add survey results to resultsJson object\n  let keys = Object.keys(surveyResults);\n  keys = keys.sort();\n\n  for (let i = 0; i < keys.length; i++) {\n    resultsJson[keys[i]] = surveyResults[keys[i]];\n  }\n\n  let allResults = JSON.parse(localStorage.getItem('allResults'));\n  if (allResults === undefined || allResults === null) {\n    allResults = {};\n  }\n\n  // allResults[resultsJson.randomId16] = { ...resultsJson };\n\n  localStorage.setItem('allResults', JSON.stringify(resultsJson));\n\n  console.log(\n    'TCL: prepareDataForPost -> allResults',\n    JSON.stringify(allResults, null, 2)\n  );\n\n  // localStorage.setItem('resultsJson', JSON.stringify(resultsJson));\n};\n\nexport default prepareDataForPost;\n","import React, { Component } from \"react\";\nimport \"./SubmitData.css\";\nimport state from \"../state\";\n\n/* eslint react/prop-types: 0 */\n\nconst handleClick = () => {\n  console.log(\"clicked\");\n  state.setState({ displayAdmin: true, displaySubmitData: false });\n};\n\nclass SubmitData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showSuccess: false,\n      showError: false,\n      showTransmit: true\n    };\n    this.transmitData = this.transmitData.bind(this);\n    this.showSuccess = this.showSuccess.bind(this);\n  }\n\n  componentDidMount() {\n    // );\n    this.transmitData();\n  }\n\n  showSuccess = () => {\n    this.setState({\n      showSuccess: true,\n      showError: false,\n      showTransmit: false\n    });\n  };\n\n  showError = () => {\n    this.setState({\n      showError: true,\n      showTransmit: false,\n      showSuccess: false\n    });\n  };\n\n  transmitData = () => {\n    const resultsJson = JSON.parse(localStorage.getItem(\"allResults\"));\n    console.log(\n      \"TCL: SubmitData -> transmitData -> resultsJson\",\n      JSON.stringify(resultsJson[0])\n    );\n    const firebase = window.firebase;\n    let participantId = localStorage.getItem(\"randomId16\");\n\n    firebase\n      .database()\n      .ref(participantId)\n      .set(resultsJson, error => {\n        if (error) {\n          console.log(JSON.stringify(\"there was a data transmission error\"));\n          this.showError();\n        } else {\n          console.log(JSON.stringify(\"data transmission success\"));\n          this.showSuccess();\n        }\n      });\n\n    console.log(\n      \"TCL: SubmitData -> componentDidMount -> resultsJson\",\n      JSON.stringify(resultsJson, null, 2)\n    );\n  };\n\n  render() {\n    if (this.state.showError === true) {\n      return (\n        <div className=\"SubmitData\">\n          <div className=\"titleDivSubmitData\">\n            <h1>Submit Data</h1>\n          </div>\n\n          <div className=\"transmittingAnimation\">\n            <div className=\"loading-screen\">\n              <div className=\"loadingScreenTitle\">\n                There was a data transmission error. Please click the \"Submit\"\n                button to try again!\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    if (this.state.showSuccess === true) {\n      return (\n        <div className=\"SubmitData\">\n          <div className=\"titleDivSubmitData\">\n            <h1>Submit Data</h1>\n          </div>\n\n          <div className=\"transmittingAnimation\">\n            <div className=\"loading-screen\">\n              <div className=\"loadingScreenTitle\">Success!</div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    if (this.state.showTransmit === true) {\n      return (\n        <div className=\"SubmitData\">\n          <div className=\"titleDivSubmitData\">\n            <h1>Submit Data</h1>\n          </div>\n\n          <div className=\"transmittingAnimation\">\n            <div className=\"loading-screen\">\n              <div className=\"loadingScreenTitle\">\n                Survey Complete - Thank You!\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default SubmitData;\n\n/*\nloading wave animation from https://codepen.io/anron/pen/ZPXzKP?page=1&\nAnton Lapko\n*/\n","import React, { Component } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { view } from 'react-easy-state';\nimport state from '../state';\n\n/* eslint react/prop-types: 0 */\n\nconst handleClick = () => {\n  console.log('clicked');\n  state.setState({ displayAdmin: true, displayResults: false });\n};\n\nclass Results extends Component {\n  render() {\n    const results2 = JSON.parse(localStorage.getItem('allResults'));\n    const results = JSON.stringify(results2, null, 4);\n    console.log('results ' + results);\n\n    return (\n      <PageContainer>\n        <HeaderDiv>\n          <h1>All Results</h1>\n          <NavButStatements onClick={handleClick}>Return</NavButStatements>\n        </HeaderDiv>\n\n        <ResultsSection>\n          <ResultsTitle>Results</ResultsTitle>\n          <ResultsDiv>\n            <textarea value={results} />\n          </ResultsDiv>\n        </ResultsSection>\n      </PageContainer>\n    );\n  }\n}\n\nexport default view(Results);\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst PageContainer = styled.div`\n  width: 1366px;\n  height: 1004px;\n  background-color: #323232;\n  color: whitesmoke;\n  padding: 20px;\n  visibility: ${props => (props.out ? 'hidden' : 'visible')};\n  animation: ${props => (props.out ? fadeOut : fadeIn)} 0.2s linear;\n  transition: visibility 1s linear;\n`;\n\nconst NavButStatements = styled.button`\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  appearance: none;\n  height: 40px;\n  width: 100px;\n  margin-left: 45px;\n  margin-top: 20px;\n  color: #323232;\n  background: #1985c5;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  border: 0px solid #666;\n  font-size: 150%;\n  text-align: center;\n  line-height: 1em;\n\n  &:active {\n    background-color: #146a9d;\n  }\n`;\n\nconst HeaderDiv = styled.div`\n  display: flex;\n  align-items: end;\n`;\n\nconst ResultsSection = styled.div`\n  margin-top: 50px;\n  grid-column-start: 1;\n  grid-column-end: 5;\n  grid-row-start: 2;\n  /* border: 2px solid red; */\n`;\n\nconst ResultsTitle = styled.div`\n  font-size: 30px;\n`;\n\nconst ResultsDiv = styled.div`\n  textarea {\n    height: 480px;\n    width: 1270px;\n    background: whitesmoke;\n  }\n`;\n","// import shuffle from 'lodash/shuffle';\nimport { view } from \"react-easy-state\";\nimport React, { Component } from \"react\";\n// import cloneDeep from 'lodash/cloneDeep';\nimport styled, { keyframes } from \"styled-components\";\nimport state from \"../state\";\nimport getRandomId from \"../Utils/getRandomId\";\nimport getFormattedViewTime from \"../Utils/getFormattedViewTime\";\n\n/* eslint react/prop-types: 0 */\n\nconst handleStartButtonClick = () => {\n  console.log(\"start click\");\n  state.setState({ displayLanding: false, displayPresort: true });\n\n  const randomId8 = getRandomId();\n  const randomId8b = getRandomId();\n  const randomId16 = randomId8 + randomId8b;\n\n  localStorage.setItem(\"randomId8\", randomId8);\n  localStorage.setItem(\"randomId16\", randomId16);\n\n  const startDate = getFormattedViewTime();\n  localStorage.setItem(\"startDate\", startDate);\n\n  const startTime = Date.now();\n  localStorage.setItem(\"projectStartTime\", startTime);\n};\n\nconst handleAddParticipantName = e => {\n  // console.log(e.target.value);\n  localStorage.setItem(\"participantName\", e.target.value);\n\n  state.setState({ showStartButton: true });\n};\n\nclass Landing extends Component {\n  render() {\n    const { columnStatements, sortCharacteristics } = this.props;\n\n    const loadStatements = localStorage.getItem(\"loadStatements\");\n    if (loadStatements !== \"true\" || loadStatements === undefined) {\n      localStorage.setItem(\n        \"columnStatements\",\n        JSON.stringify(columnStatements)\n      );\n      localStorage.setItem(\"loadStatements\", \"true\");\n    }\n\n    state.setState({ sortCharacteristics });\n\n    const showStartButton = state.getState(\"showStartButton\");\n    const participantName = localStorage.getItem(\"participantName\");\n\n    return (\n      <PageContainer>\n        <h1>Thank you for participating in this research project!</h1>\n        <label htmlFor=\"projectNameInput\">\n          Participant Name:\n          <input\n            style={{ marginLeft: 5, borderRadius: 2 }}\n            id=\"participantNameInput\"\n            type=\"text\"\n            name=\"projectName\"\n            defaultValue={participantName}\n            onChange={handleAddParticipantName}\n          />\n        </label>\n        {showStartButton ? (\n          <BeginQsortButton onClick={handleStartButtonClick}>\n            Start Q Sort\n          </BeginQsortButton>\n        ) : (\n          <PlaceholderButton />\n        )}\n      </PageContainer>\n    );\n  }\n}\n\nexport default view(Landing);\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst fadeOut = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\nconst PageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  /* justify-items: center; */\n  /* grid-template-columns: 1fr; */\n  /* grid-template-rows: 250px 250px 1fr; */\n  width: 1024px;\n  height: 768px;\n  background-color: #323232;\n  color: white;\n  padding-top: 20px;\n  visibility: ${props => (props.out ? \"hidden\" : \"visible\")};\n  animation: ${props => (props.out ? fadeOut : fadeIn)} 0.2s linear;\n  transition: visibility 1s linear;\n`;\n\nconst Column1 = styled.div`\n  grid-column-start: 1;\n  grid-row-start: 1;\n  /* border: 2px solid yellow; */\n`;\n\nconst Column2 = styled.div`\n  grid-column-start: 2;\n  grid-row-start: 1;\n  /* border: 2px solid yellow; */\n`;\n\nconst Column3 = styled.div`\n  width: 250px;\n  grid-column-start: 3;\n  grid-row-start: 1;\n  /* border: 2px solid yellow; */\n\n  input {\n    width: 250px;\n    font-size: 20px;\n    margin-bottom: 30px;\n  }\n`;\n\nconst Column1Button = styled.button`\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  appearance: none;\n  height: 140px;\n  width: 250px;\n  margin-left: 45px;\n  margin-bottom: 15px;\n  margin-top: 10px;\n  color: #323232;\n  background: #1985c5;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  border: 0px solid #666;\n  font-size: 300%;\n  line-height: 1em;\n  outline: none;\n  -webkit-user-select: none;\n\n  &:active {\n    background-color: #146a9d;\n  }\n`;\n\nconst Column2Button = styled.button`\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  appearance: none;\n  width: 250px;\n  height: 140px;\n  margin-top: 10px;\n  margin-bottom: 15px;\n  margin-left: 46px;\n  color: #323232;\n  background: #1985c5;\n  border: 0px solid #666;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  font-size: 300%;\n  text-align: center;\n  line-height: 1.05em;\n  outline: none;\n  -webkit-user-select: none;\n\n  &:active {\n    background-color: #146a9d;\n  }\n`;\n\nconst BeginQsortButton = styled.button`\n  appearance: none;\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  margin-left: 5px;\n  width: 150px;\n  height: 50px;\n  margin-top: 2px;\n  background: #55b262;\n  color: #323232;\n  font-weight: 900;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  grid-column-start: 4;\n  grid-row-start: 1;\n  font-size: 20px;\n  text-align: center;\n  user-select: none;\n  border: 0px solid black;\n  outline: none;\n\n  &:active {\n    background-color: #448e4e;\n  }\n`;\n\nconst PlaceholderButton = styled.button`\n  appearance: none;\n  position: relative;\n  font-family: HelveticaNeue-CondensedBlack, Arial, Helvetica, sans-serif;\n  margin-left: 5px;\n  width: 150px;\n  height: 50px;\n  margin-top: 2px;\n  background: #323232;\n  color: #323232;\n  font-weight: 900;\n  -webkit-border-radius: 5px;\n  border-radius: 5px;\n  grid-column-start: 4;\n  grid-row-start: 1;\n  font-size: 20px;\n  text-align: center;\n  user-select: none;\n  border: 0px solid black;\n  outline: none;\n\n  &:active {\n    background-color: #448e4e;\n  }\n`;\n\nconst ResultsSection = styled.div`\n  margin-top: 50px;\n  grid-column-start: 1;\n  grid-column-end: 5;\n  grid-row-start: 2;\n  /* border: 2px solid red; */\n`;\n\nconst ResultsTitle = styled.div`\n  font-size: 30px;\n`;\n\nconst ResultsDiv = styled.div`\n  height: 480px;\n  width: 1270px;\n  background: whitesmoke;\n`;\n\n/*\n// shuffle the cards - once only\n    let hasShuffledCards = sessionStorage.getItem(\"hasShuffled\");\n    if (hasShuffledCards !== \"true\") {\n      const cards2 = this.props.columnStatements.statementList;\n      const cards = cloneDeep(cards2);\n      const shuffledCards = shuffle(cards);\n      this.props.columnStatements.statementList = shuffledCards;\n      sessionStorage.setItem(\n        \"columnStatements\",\n        JSON.stringify(this.props.columnStatements)\n      );\n      sessionStorage.setItem(\"hasShuffled\", \"true\");\n    }\n\n\n // sent participant info to state for storage\n    const randomId8 = getRandomId();\n    const randomId8b = getRandomId();\n    const randomId16 = randomId8 + randomId8b;\n\n    sessionStorage.setItem(\"randomId8\", randomId8);\n    sessionStorage.setItem(\"randomId16\", randomId16);\n\n    let startDate = getFormattedViewTime();\n    sessionStorage.setItem(\"startDate\", startDate);\n\n    startTime = Date.now();\n    sessionStorage.setItem(\"projectStartTime\", startTime);\n\n\n*/\n","import React, { Component } from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport { view } from 'react-easy-state';\nimport Admin from './Admin/Admin';\nimport Statements from './Statements/Statements';\nimport Presort from './Presort/Presort';\nimport Sort from './Sort/Sort';\nimport PostSort from './Postsort/PostSort';\nimport Survey from './Survey/Survey';\nimport SubmitData from './SubmitData/SubmitData';\nimport Results from './Results/Results';\nimport state from './state';\nimport Landing from './Landing/Landing';\n\n/* eslint react/prop-types: 0 */\n\nclass App extends Component {\n  render() {\n    const displayLanding = state.getState(\"displayLanding\");\n    const displayAdmin = state.getState('displayAdmin');\n    const displayPresort = state.getState('displayPresort');\n    const displayStatements = state.getState('displayStatements');\n    const displaySort = state.getState('displaySort');\n    const displayPostsort = state.getState('displayPostsort');\n    const displaySurvey = state.getState('displaySurvey');\n    const displaySubmitData = state.getState('displaySubmitData');\n    const displayResults = state.getState('displayResults');\n\n    // initialize\n    const checkInitialize = localStorage.getItem(\"isInitialized\");\n    if (checkInitialize === null) {\n      localStorage.setItem(\"isSortingCards\", \"true\");\n      localStorage.setItem(\"checkInitialize\", \"initialized\");\n    }\n\n    const {\n      adminData,\n      columnStatements,\n      preSortData,\n      sortPageData,\n      postSortData,\n      surveyData,\n      landingData\n    } = this.props;\n\n    return (\n      <PageContainer>\n        {displayLanding && (\n          <Landing\n            {...landingData}\n            sortCharacteristics={sortPageData.sortCharacteristics}\n            columnStatements={columnStatements}\n            out={displayLanding}\n          />\n        )}\n        {displayAdmin && (\n          <Admin\n            {...adminData}\n            sortCharacteristics={sortPageData.sortCharacteristics}\n            columnStatements={columnStatements}\n            out={displayAdmin}\n          />\n        )}\n        {displayStatements && (\n          <Statements\n            out={displayStatements}\n            columnStatements={columnStatements}\n          />\n        )}\n        {displayResults && <Results out={displayResults} />}\n        {displayPresort && (\n          <Presort\n            {...preSortData}\n            out={displayPresort}\n            columnStatements={columnStatements}\n          />\n        )}\n        {displaySort && (\n          <Sort\n            {...sortPageData}\n            out={displaySort}\n            sortPageData={sortPageData}\n          />\n        )}\n        {displayPostsort && (\n          <PostSort {...postSortData} out={displayPostsort} />\n        )}\n        {displaySurvey && <Survey {...surveyData} out={displaySurvey} />}\n        {displaySubmitData && <SubmitData out={displaySubmitData} />}\n      </PageContainer>\n    );\n  }\n}\n\nexport default view(App);\n\nconst PageContainer = styled.div`\n  background-color: black;\n  /* width: 1366px;\n  height: 1024px;\n  \n  padding: 20px; */\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst xhttp = new XMLHttpRequest();\nlet data = {};\n\nxhttp.onreadystatechange = function() {\n  if (this.readyState === 4 && this.status === 200) {\n    // grad json user settings and push to application state\n    data = JSON.parse(xhttp.responseText);\n\n    ReactDOM.render(<App {...data} />, document.getElementById('root'));\n  }\n};\n\nxhttp.open('GET', `${process.env.PUBLIC_URL}/SETTINGS.json`, true);\nxhttp.send();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n/*\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport state from \"../src/store\";\n\nvar xhttp = new XMLHttpRequest();\nvar data = {};\n\nxhttp.onreadystatechange = function() {\n  if (this.readyState === 4 && this.status === 200) {\n    // grad json user settings and push to application state\n    data = JSON.parse(xhttp.responseText);\n    state.setState({\n      // userSettings: data,\n      statements: data.statementList\n    });\n\n    ReactDOM.render(\n      <BrowserRouter>\n        <App userData={data} />\n      </BrowserRouter>,\n      document.getElementById(\"root\")\n    );\n  }\n};\n\nxhttp.open(\"GET\", `${process.env.PUBLIC_URL}/SETTINGS.json`, true);\nxhttp.send();\n\nregisterServiceWorker();\n\n// hot module replacement\nif (module.hot && process.env.NODE_ENV !== \"production\") {\n  module.hot.accept();\n}\n*/\n"],"sourceRoot":""}